// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sam30606

//@version=5
// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #
strategy("1m Scalping", shorttitle="1m Scalping", overlay=true)

// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #


// # ========================================================================= #
// #                   |   EMA  |
// # ========================================================================= #

EMA_len = input.int(600, minval=1, title="EMA_len")
src = input(close, title="Source")
offset = input.int(title="Offset", defval=0, minval=-500, maxval=500)
out = ta.ema(src, EMA_len)
//plot(out, title="EMA", color=color.white, offset=offset)
ema=out
// # ========================================================================= #
// #                   |   EMA  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Trend Trader  |
// # ========================================================================= #


Trend_length = input.int(21, minval=1)
Multiplier = input.float(3, minval=0.000001)
avgTR = ta.wma(ta.atr(1), Trend_length)
highestC = ta.highest(Trend_length)
lowestC = ta.lowest(Trend_length)
hiLimit = highestC[1] - avgTR[1] * Multiplier
loLimit = lowestC[1] + avgTR[1] * Multiplier
ret = 0.0
pos = 0.0
iff_1 = close < loLimit and close < hiLimit ? loLimit : nz(ret[1], close)
ret := close > hiLimit and close > loLimit ? hiLimit : iff_1
iff_2 = close < ret ? -1 : nz(pos[1], 0)
pos := close > ret ? 1 : iff_2
//barcolor(pos == -1 ? color.red : pos == 1 ? color.green : color.blue)
//plot(ret, color=color.new(color.blue, 0), title='Trend Trader Strategy')

// # ========================================================================= #
// #                   |   Trend Trader  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   STC  |
// # ========================================================================= #
EEEEEE = input(12, 'Length')
BBBB = input(26, 'FastLength')
BBBBB = input(50, 'SlowLength')

AAAA(BBB, BBBB, BBBBB) =>
    fastMA = ta.ema(BBB, BBBB)
    slowMA = ta.ema(BBB, BBBBB)
    AAAA = fastMA - slowMA
    AAAA

AAAAA(EEEEEE, BBBB, BBBBB) =>
    AAA = input(0.5)
    var CCCCC = 0.0
    var DDD = 0.0
    var DDDDDD = 0.0
    var EEEEE = 0.0
    BBBBBB = AAAA(close, BBBB, BBBBB)
    CCC = ta.lowest(BBBBBB, EEEEEE)
    CCCC = ta.highest(BBBBBB, EEEEEE) - CCC
    CCCCC := CCCC > 0 ? (BBBBBB - CCC) / CCCC * 100 : nz(CCCCC[1])
    DDD := na(DDD[1]) ? CCCCC : DDD[1] + AAA * (CCCCC - DDD[1])
    DDDD = ta.lowest(DDD, EEEEEE)
    DDDDD = ta.highest(DDD, EEEEEE) - DDDD
    DDDDDD := DDDDD > 0 ? (DDD - DDDD) / DDDDD * 100 : nz(DDDDDD[1])
    EEEEE := na(EEEEE[1]) ? DDDDDD : EEEEE[1] + AAA * (DDDDDD - EEEEE[1])
    EEEEE

mAAAAA = AAAAA(EEEEEE, BBBB, BBBBB)
mColor = mAAAAA > mAAAAA[1] ? color.new(color.green, 20) : color.new(color.red, 20)



if mAAAAA[3] <= mAAAAA[2] and mAAAAA[2] > mAAAAA[1] and mAAAAA > 75
    alert("Red", alert.freq_once_per_bar)
if mAAAAA[3] >= mAAAAA[2] and mAAAAA[2] < mAAAAA[1] and mAAAAA < 25
    alert("Green", alert.freq_once_per_bar)


//plot(mAAAAA, color=mColor, title='STC', linewidth=2)

//ul = plot(25, color=color.new(color.gray, 70))
//ll = plot(75, color=color.new(color.gray, 70))
//fill(ul, ll, color=color.new(color.gray, 96))


// # ========================================================================= #
// #                   |   STC  |
// # ========================================================================= #


// # ========================================================================= #
// #                   |   ADX and DI   |
// # ========================================================================= #


ADX_len = input(14)

TrueRange = math.max(math.max(high - low, math.abs(high - nz(close[1]))), math.abs(low - nz(close[1])))
DirectionalMovementPlus = high - nz(high[1]) > nz(low[1]) - low ? math.max(high - nz(high[1]), 0) : 0
DirectionalMovementMinus = nz(low[1]) - low > high - nz(high[1]) ? math.max(nz(low[1]) - low, 0) : 0

SmoothedTrueRange = 0.0
SmoothedTrueRange := nz(SmoothedTrueRange[1]) - nz(SmoothedTrueRange[1]) / ADX_len + TrueRange

SmoothedDirectionalMovementPlus = 0.0
SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - nz(SmoothedDirectionalMovementPlus[1]) / ADX_len + DirectionalMovementPlus

SmoothedDirectionalMovementMinus = 0.0
SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - nz(SmoothedDirectionalMovementMinus[1]) / ADX_len + DirectionalMovementMinus

DIPlus = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
DIMinus = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100



// # ========================================================================= #
// #                   |   ADX and DI   |
// # ========================================================================= #


// # ========================================================================= #
// #                   |   Average True Range Stop Loss Finder  |
// # ========================================================================= #


avg_length = input.int(title='avg_length', defval=14, minval=1)
smoothing = input.string(title='Smoothing', defval='RMA', options=['RMA', 'SMA', 'EMA', 'WMA'])
m = input(0.85, 'Multiplier')
src1 = input(high)
src2 = input(low)
pline = input(true, 'Show Price Lines')
col1 = input(color.blue, 'ATR Text Color')
col2 = input.color(color.teal, 'Low Text Color', inline='1')
col3 = input.color(color.red, 'High Text Color', inline='2')

collong = input.color(color.white, 'Low Line Color', inline='1')
colshort = input.color(color.white, 'High Line Color', inline='2')

ma_function(source, avg_length) =>
    if smoothing == 'RMA'
        ta.rma(source, avg_length)
    else
        if smoothing == 'SMA'
            ta.sma(source, avg_length)
        else
            if smoothing == 'EMA'
                ta.ema(source, avg_length)
            else
                ta.wma(source, avg_length)

a = ma_function(ta.tr(true), avg_length) * m
x = ma_function(ta.tr(true), avg_length) * m + src1
x2 = src2 - ma_function(ta.tr(true), avg_length) * m

//p1 = plot(x, title='ATR Short Stop Loss', color=colshort, trackprice=pline ? true : false)
//p2 = plot(x2, title='ATR Long Stop Loss', color=collong, trackprice=pline ? true : false)



// # ========================================================================= #
// #                   |   Average True Range Stop Loss Finder  |
// # ========================================================================= #


// # ========================================================================= #
// #                   |   Trend Trader  |
// # ========================================================================= #


var float entryPrice=0

fromYear = input.int(defval=2022, title='From Year', minval=2020, group="Back Test Settings")
fromMomth = input.int(defval=7, title='From Month', minval=1, maxval=12, group="Back Test Settings")
fromDay = input.int(defval=1, title='From Day', minval=1, maxval=31, group="Back Test Settings")
toYear = input.int(defval=2300, title='To Year', minval=2020, group="Back Test Settings")
toMomth = input.int(defval=1, title='To Month', minval=1, maxval=12, group="Back Test Settings")
toDay = input.int(defval=1, title='To Day', minval=1, maxval=31, group="Back Test Settings")

start = timestamp(fromYear, fromMomth, fromDay, 00, 00)
finish = timestamp(toYear, toMomth, toDay, 23, 59)
window()=>time>=start and time <= finish ? true : false

stop_loss_and_tp = input(title='Enable Stop Loss and Take Profit', defval=true, group="Trace Stop Settings")
trail_stop = input(title='Enable Trail Stop', defval=true, group="Trace Stop Settings")
buy_stop_loss = input.float(1, title='buy_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
sell_stop_loss = input.float(1, title='sell_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
buy_tp = input.float(3, title='buy_tp %', step = 0.1, group="Trace Stop Settings")/100
sell_tp = input.float(3, title='sell_tp %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_long = input.float(0.2, title='trail_stop_long %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_short = input.float(0.2, title='trail_stop_short %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_long_offset = input.float(0.1 ,title='trail_stop_long_offset %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_short_offset = input.float(0.1, title='trail_stop_short_offset %', step = 0.1, group="Trace Stop Settings")/100

// you can set your own logic here

sideKQTY = input.int(1, minval=1)
redKQTY= input.int(4, minval=1)
greenKQTY= input.int(10, minval=1)
DIgap=input.int(3, minval=1)

var int buyK=0
var int sellK=0

var int redK=0
var int greenK=0

buyK:=(close)>ema?buyK+1:0
sellK:=(close)<ema?sellK+1:0

Kcolor=pos>0?true:false

redK:=Kcolor?(Kcolor[1]?0:redK):redK+1
greenK:=Kcolor?greenK+1:(Kcolor[1]?greenK:0)


buyTrend=buyK>=sideKQTY?true:false
sellTrend=sellK>=sideKQTY?true:false

DICondition=DIPlus>DIMinus?(DIPlus-DIMinus>=DIgap?true:false):(DIMinus-DIPlus>=DIgap?true:false)

STC = mAAAAA > mAAAAA[1] ? true : false


buyCondition=(buyTrend==true and Kcolor==true and STC==true and DICondition and  redK>=redKQTY)?true:false
sellCondition=(sellTrend==true and Kcolor==true and STC==false and DICondition and greenK<=greenKQTY)?true:false

if(window())
    if (buyCondition)
        redK:=0
        greenK:=0
        entryPrice := (close)
        strategy.close('Sell', alert_message = "buy")
        strategy.entry('Buy', strategy.long, alert_message = "buy")
        strategy.exit('Close Buy', 'Buy', limit=stop_loss_and_tp ? (close) * (1 + buy_tp) : na, stop=stop_loss_and_tp ? (close) * (1 - buy_stop_loss) : na, trail_price=trail_stop ? (close) * (1+trail_stop_long) : na, trail_offset=trail_stop ? (close) * (1+trail_stop_long) * trail_stop_long_offset / syminfo.mintick : na, comment_trailing='close trailing', alert_message = "close")
    if (sellCondition)
        redK:=0
        greenK:=0
        entryPrice := (close)
        strategy.close('Buy', alert_message = "sell")
        strategy.entry('Sell', strategy.short, alert_message = "sell")
        strategy.exit('Close Sell', 'Sell', limit=stop_loss_and_tp ? (close) * (1 - sell_tp) : na, stop=stop_loss_and_tp ? (close) * (1 + sell_stop_loss) : na, trail_price=trail_stop ? (close) * (1-trail_stop_short) : na, trail_offset=trail_stop ? (close) * (1-trail_stop_short) * trail_stop_short_offset / syminfo.mintick: na, comment_trailing='close trailing', alert_message = "close")


net_profit = strategy.netprofit + strategy.openprofit

plot(net_profit, title='Net Profit', linewidth=2, style=plot.style_area, color=net_profit >= 0 ? #26A69A : color.new(color =color.red  , transp = 50))

// # ========================================================================= #
// #                   |   PRINT  |
// # ========================================================================= #

plotchar(buyCondition, "buyCondition", "", location = location.top)
plotchar(sellCondition, "sellCondition", "", location = location.top)
plotchar(Kcolor, "Kcolor", "", location = location.top)
plotchar(STC, "STC", "", location = location.top)
plotchar(buyTrend, "buyTrend", "", location = location.top)
plotchar(sellTrend, "sellTrend", "", location = location.top)
plotchar(ema, "EMA", "", location = location.top)
plotchar(buyK, "buyK", "", location = location.top)
plotchar(sellK, "sellK", "", location = location.top)
plotchar(redK, "redK", "", location = location.top)
plotchar(greenK, "greenK", "", location = location.top)
plotchar(DIPlus, "DIPlus", "", location = location.top)
plotchar(DIMinus, "DIMinus", "", location = location.top)
plotchar(x, 'ATR Short Stop Loss', "", location = location.top)
plotchar(x2, 'ATR Long Stop Loss', "", location = location.top)


