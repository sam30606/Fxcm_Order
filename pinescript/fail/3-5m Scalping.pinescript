// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © sam30606

//@version=5
// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #
strategy("3-5m Scalping", shorttitle="3-5m Scalping", overlay=true)

// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   WaveTrend with Crosses [LazyBear]  |
// # ========================================================================= #


n1 = input(10, 'Channel Length')
n2 = input(21, 'Average Length')

obLevel1 = input(-53, 'Over Bought Level 2')
osLevel1 = input(-53, 'Over Sold Level 2')

ap = hlc3
esa = ta.ema(ap, n1)
d = ta.ema(math.abs(ap - esa), n1)
ci = (ap - esa) / (0.015 * d)
tci = ta.ema(ci, n2)

wt1 = tci
wt2 = ta.sma(wt1, 4)

//plot(obLevel1, color=color.new(color.red, 0))
//plot(osLevel1, color=color.new(color.green, 0))

//plot(ta.cross(wt1, wt2) ? wt2 : na, color=color.new(color.black, 0), style=plot.style_circles, linewidth=3)
//plot(ta.cross(wt1, wt2) ? wt2 : na, color=wt2 - wt1 > 0 ? color.red : color.lime, style=plot.style_circles, linewidth=2)

buyDOT=(ta.cross(wt1, wt2) ? (wt2-wt1>0 ? 0 : (wt2<osLevel1 ? true : 0)) : 0)
sellDOT=(ta.cross(wt1, wt2) ? (wt2-wt1>0 ? (wt2>obLevel1 ? true : 0 ) : 0) : 0)



// # ========================================================================= #
// #                   |   WaveTrend with Crosses [LazyBear]  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Cumulative Delta Volume © LonesomeTheBlue |
// # ========================================================================= #


linestyle = input.string(defval='Candle', title='Style', options=['Candle', 'Line'])
hacandle = input(defval=false, title='Heikin Ashi Candles?')
//showma1 = input.bool(defval=false, title='SMA 1', inline='ma1')
//ma1len = input.int(defval=50, title='', minval=1, inline='ma1')
//ma1col = input.color(defval=color.lime, title='', inline='ma1')
//showma2 = input.bool(defval=false, title='SMA 2', inline='ma2')
//ma2len = input.int(defval=200, title='', minval=1, inline='ma2')
//ma2col = input.color(defval=color.red, title='', inline='ma2')
//showema1 = input.bool(defval=false, title='EMA 1', inline='ema1')
//ema1len = input.int(defval=50, title='', minval=1, inline='ema1')
//ema1col = input.color(defval=color.lime, title='', inline='ema1')
//showema2 = input.bool(defval=false, title='EMA 2', inline='ema2')
//ema2len = input.int(defval=200, title='', minval=1, inline='ema2')
//ema2col = input.color(defval=color.red, title='', inline='ema2')
colorup = input.color(defval=color.lime, title='Body', inline='bcol')
colordown = input.color(defval=color.red, title='', inline='bcol')
bcolup = input.color(defval=#74e05e, title='Border', inline='bocol')
bcoldown = input.color(defval=#ffad7d, title='', inline='bocol')
wcolup = input.color(defval=#b5b5b8, title='Wicks', inline='wcol')
wcoldown = input.color(defval=#b5b5b8, title='', inline='wcol')

tw = high - math.max(open, close)
bw = math.min(open, close) - low
body = math.abs(close - open)

_rate(cond) =>
    ret = 0.5 * (tw + bw + (cond ? 2 * body : 0)) / (tw + bw + body)
    ret := nz(ret) == 0 ? 0.5 : ret
    ret

deltaup = volume * _rate(open <= close)
deltadown = volume * _rate(open > close)
delta = close >= open ? deltaup : -deltadown
cumdelta = ta.cum(delta)
float ctl = na
float o = na
float h = na
float l = na
float c = na
if linestyle == 'Candle'
    o := cumdelta[1]
    h := math.max(cumdelta, cumdelta[1])
    l := math.min(cumdelta, cumdelta[1])
    c := cumdelta
    ctl
else
    ctl := cumdelta
    ctl

//plot(ctl, title='CDV Line', color=color.new(color.blue, 0), linewidth=2)

float haclose = na
float haopen = na
float hahigh = na
float halow = na
haclose := (o + h + l + c) / 4
haopen := na(haopen[1]) ? (o + c) / 2 : (haopen[1] + haclose[1]) / 2
hahigh := math.max(h, math.max(haopen, haclose))
halow := math.min(l, math.min(haopen, haclose))

c_ = hacandle ? haclose : c
o_ = hacandle ? haopen : o
h_ = hacandle ? hahigh : h
l_ = hacandle ? halow : l

//lotcandle(o_, h_, l_, c_, title='CDV Candles', color=o_ <= c_ ? colorup : colordown, bordercolor=o_ <= c_ ? bcolup : bcoldown, wickcolor=o_ <= c_ ? bcolup : bcoldown)

//plot(showma1 and linestyle == 'Candle' ? ta.sma(c_, ma1len) : na, title='SMA 1', color=ma1col)
//plot(showma2 and linestyle == 'Candle' ? ta.sma(c_, ma2len) : na, title='SMA 2', color=ma2col)
//plot(showema1 and linestyle == 'Candle' ? ta.ema(c_, ema1len) : na, title='EMA 1', color=ema1col)
//plot(showema2 and linestyle == 'Candle' ? ta.ema(c_, ema2len) : na, title='EMA 2', color=ema2col)

// # ========================================================================= #
// #                   |   Cumulative Delta Volume © LonesomeTheBlue |
// # ========================================================================= #




fromYear = input.int(defval=2022, title='From Year', minval=2020, group="Back Test Settings")
fromMomth = input.int(defval=7, title='From Month', minval=1, maxval=12, group="Back Test Settings")
fromDay = input.int(defval=1, title='From Day', minval=1, maxval=31, group="Back Test Settings")
toYear = input.int(defval=2300, title='To Year', minval=2020, group="Back Test Settings")
toMomth = input.int(defval=1, title='To Month', minval=1, maxval=12, group="Back Test Settings")
toDay = input.int(defval=1, title='To Day', minval=1, maxval=31, group="Back Test Settings")

start = timestamp(fromYear, fromMomth, fromDay, 00, 00)
finish = timestamp(toYear, toMomth, toDay, 23, 59)
window()=>time>=start and time <= finish ? true : false

stop_loss_and_tp = input(title='Enable Stop Loss and Take Profit', defval=true, group="Trace Stop Settings")
trail_stop = input(title='Enable Trail Stop', defval=true, group="Trace Stop Settings")
buy_stop_loss = input.float(1, title='buy_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
sell_stop_loss = input.float(1, title='sell_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
buy_tp = input.float(3, title='buy_tp %', step = 0.1, group="Trace Stop Settings")/100
sell_tp = input.float(3, title='sell_tp %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_long = input.float(0.2, title='trail_stop_long %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_short = input.float(0.2, title='trail_stop_short %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_long_offset = input.float(0.1 ,title='trail_stop_long_offset %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_short_offset = input.float(0.1, title='trail_stop_short_offset %', step = 0.1, group="Trace Stop Settings")/100

// you can set your own logic here

var float entryPrice=0

buyCondition = (o_ <= c_ and buyDOT) ? true : na
sellCondition = (o_ >= c_ and sellDOT) ? true : na

if(window())
    if (buyCondition)
        entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1) ? strategy.opentrades.entry_price(strategy.opentrades - 1) : (close)
        strategy.close('Sell', alert_message = "buy")
        strategy.entry('Buy', strategy.long, alert_message = "buy")
        strategy.exit('Close Buy', 'Buy', limit=stop_loss_and_tp ? entryPrice * (1 + buy_tp) : na, stop=stop_loss_and_tp ? entryPrice * (1 - buy_stop_loss) : na, trail_price=trail_stop ? entryPrice * (1+trail_stop_long) : na, trail_offset=trail_stop ? entryPrice * (1+trail_stop_long) * trail_stop_long_offset / syminfo.mintick : na, comment_trailing='close trailing', alert_message = "close")
    if (sellCondition)
        entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1) ? strategy.opentrades.entry_price(strategy.opentrades - 1) : (close)
        strategy.close('Buy', alert_message = "sell")
        strategy.entry('Sell', strategy.short, alert_message = "sell")
        strategy.exit('Close Sell', 'Sell', limit=stop_loss_and_tp ? entryPrice * (1 - sell_tp) : na, stop=stop_loss_and_tp ? entryPrice * (1 + sell_stop_loss) : na, trail_price=trail_stop ? entryPrice * (1-trail_stop_short) : na, trail_offset=trail_stop ? entryPrice * (1-trail_stop_short) * trail_stop_short_offset / syminfo.mintick: na, comment_trailing='close trailing', alert_message = "close")


net_profit = strategy.netprofit + strategy.openprofit

plot(net_profit, title='Net Profit', linewidth=2, style=plot.style_area, color=net_profit >= 0 ? #26A69A : color.new(color =color.red  , transp = 50))



// # ========================================================================= #
// #                   |   Print  |
// # ========================================================================= #

plotchar(c_, "c_", "", location = location.top)
plotchar(o_, "o_", "", location = location.top)
plotchar(h_, "h_", "", location = location.top)
plotchar(l_, "l_", "", location = location.top)
plotchar (buyDOT, "buyDOT", "", location = location.top)
plotchar(sellDOT, "sellDOT", "", location = location.top)
plotchar(buyCondition, "buyCondition", "", location = location.top)
plotchar(sellCondition, "sellCondition", "", location = location.top)


plotchar(entryPrice, "entryPrice", "", location = location.top)
plotchar(entryPrice * (1 + buy_tp), "buy_tp", "", location = location.top)
plotchar(entryPrice * (1 - buy_stop_loss), "buy_stop_loss", "", location = location.top)
plotchar(entryPrice * (1+trail_stop_long), "buy_trail_price", "", location = location.top)
plotchar((close) * trail_stop_long_offset / syminfo.mintick, "trail_stop_long_offset", "", location = location.top)

plotchar(entryPrice, "entryPrice", "", location = location.top)
plotchar(entryPrice * (1 - sell_tp), "sell_tp", "", location = location.top)
plotchar(entryPrice * (1 + sell_stop_loss), "sell_stop_loss", "", location = location.top)
plotchar(entryPrice * (1+trail_stop_short), "sell_trail_price", "", location = location.top)
plotchar((close) * trail_stop_short_offset / syminfo.mintick, "trail_stop_short_offset", "", location = location.top)

