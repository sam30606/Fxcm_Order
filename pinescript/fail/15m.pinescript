// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © sam30606

//@version=5
// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #
strategy("Sample", shorttitle="Sample", overlay=true)

// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Moving Average Exponential  |
// # ========================================================================= #

emaLen = input.int(60, minval=1, title="Length", group="EMA Settings")
emaSrc = input(close, title="Source", group="EMA Settings")
offset = input.int(title="Offset", defval=0, minval=-500, maxval=500, group="EMA Settings")
emaOut = ta.ema(emaSrc, emaLen)

// # ========================================================================= #
// #                   |   Moving Average Exponential  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #

adxlen = input(14, title="ADX Smoothing", group="ADX settings")
dilen = input(14, title="DI Length", group="ADX settings")
dirmov(len) =>
	up = ta.change(high)
	down = -ta.change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = ta.rma(ta.tr, len)
	plus = fixnan(100 * ta.rma(plusDM, len) / truerange)
	minus = fixnan(100 * ta.rma(minusDM, len) / truerange)
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
sig = adx(dilen, adxlen)
// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   ADX and DI  |
// # ========================================================================= #
adxDIlen = input(14, group="ADXDI settings")


TrueRange = math.max(math.max(high - low, math.abs(high - nz(close[1]))), math.abs(low - nz(close[1])))
DirectionalMovementPlus = high - nz(high[1]) > nz(low[1]) - low ? math.max(high - nz(high[1]), 0) : 0
DirectionalMovementMinus = nz(low[1]) - low > high - nz(high[1]) ? math.max(nz(low[1]) - low, 0) : 0

SmoothedTrueRange = 0.0
SmoothedTrueRange := nz(SmoothedTrueRange[1]) - nz(SmoothedTrueRange[1]) / adxDIlen + TrueRange

SmoothedDirectionalMovementPlus = 0.0
SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - nz(SmoothedDirectionalMovementPlus[1]) / adxDIlen + DirectionalMovementPlus

SmoothedDirectionalMovementMinus = 0.0
SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - nz(SmoothedDirectionalMovementMinus[1]) / adxDIlen + DirectionalMovementMinus

DIPlus = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
DIMinus = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100

// # ========================================================================= #
// #                   |   ADX and DI  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Parabolic SAR  |
// # ========================================================================= #

start = input(0.02, group="SAR Settings")
increment = input(0.02, group="SAR Settings")
maximum = input(0.1, "Max Value", group="SAR Settings")
outSAR = ta.sar(start, increment, maximum)
//plot(out, "ParabolicSAR", style=plot.style_cross, color=#2962FF)

// # ========================================================================= #
// #                   |   Parabolic SAR  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Volatility Oscillator  |
// # ========================================================================= #
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © veryfid

lengthVOLO = input(100)
spike = close - open
upLine = ta.stdev(spike, lengthVOLO)
downLine = ta.stdev(spike, lengthVOLO) * -1

//plot(spike, color=color.new(color.white, 0), linewidth=2, title='Spike Linel')

//p1 = plot(x, 'Upper Line')
//p2 = plot(y, 'Lower Line')


// # ========================================================================= #
// #                   |   Volatility Oscillator  |
// # ========================================================================= #



var float entryPrice=0.0

var float buyProfit=0.0
var float buyStopValue=0.0
var float buyPrice_stop=0.0

var float sellProfit=0.0
var float sellStopValue=0.0
var float sellPrice_stop=0.0

fromYear = input.int(defval=2022, title='From Year', minval=2020, group="Back Test Settings")
fromMomth = input.int(defval=8, title='From Month', minval=1, maxval=12, group="Back Test Settings")
fromDay = input.int(defval=1, title='From Day', minval=1, maxval=31, group="Back Test Settings")
toYear = input.int(defval=2300, title='To Year', minval=2020, group="Back Test Settings")
toMomth = input.int(defval=1, title='To Month', minval=1, maxval=12, group="Back Test Settings")
toDay = input.int(defval=1, title='To Day', minval=1, maxval=31, group="Back Test Settings")

timeStart = timestamp(fromYear, fromMomth, fromDay, 00, 00)
timeFinish = timestamp(toYear, toMomth, toDay, 23, 59)
window()=>time>=timeStart and time <= timeFinish ? true : false

stop_loss_and_tp = input(title='Enable Stop Loss and Take Profit', defval=true, group="Trace Stop Settings")
trail_stop = input(title='Enable Trail Stop', defval=true, group="Trace Stop Settings")
buy_stop_loss = input.float(0, title='buy_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
sell_stop_loss = input.float(0, title='sell_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
buy_tp = input.float(1, title='buy_tp %', step = 0.1, group="Trace Stop Settings")/100
sell_tp = input.float(1, title='sell_tp %', step = 0.1, group="Trace Stop Settings")/100
trailTrig_long = input.float(0.01, title='trailTrig_long %', step = 0.1, group="Trace Stop Settings")/100
trailTrig_short = input.float(0.01, title='trailTrig_short %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_long = input.float(0.005, title='trail_stop_long %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_short = input.float(0.005, title='trail_stop_short %', step = 0.1, group="Trace Stop Settings")/100
adxLowest = input.float(20, title='ADX Lowest', step = 0.1, group="Trade Settings")

adxPass = sig > adxLowest
buyDI = DIPlus > DIMinus
sellDI = DIPlus < DIMinus
buyEMA = low > emaOut
sellEMA = high < emaOut
// you can set your own logic here

buySAR = low > outSAR
sellSAR = outSAR > high

buyVOLO = ta.crossover(spike, upLine)
sellVOLO = ta.crossunder(spike, downLine)

buyCondition = adxPass and buyEMA and buySAR and buyVOLO
sellCondition = adxPass and sellEMA and sellSAR and sellVOLO


// you can set your own logic here
if (strategy.position_size > 0)
    entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1)
    if (sellSAR)
        buyPrice_stop := close
    else
        buyPrice_stop := entryPrice * (1 - buy_stop_loss)
    //if ( high >= entryPrice * (1+trailTrig_long) )
    //    buyProfit := close * (1+trail_stop_long)
    //    buyStopValue := buyProfit[1]
    //else
    //    buyProfit := entryPrice * (1+trailTrig_long)

    //if ( low < entryPrice * (1+trailTrig_long) )
    //    buyStopValue := entryPrice * (1 - buy_stop_loss)
    //else
    //    buyStopValue := buyStopValue

    //buyPrice_stop := buyStopValue

else if (strategy.position_size < 0)
    entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1)
    if (buySAR)
        sellPrice_stop := close
    else
        sellPrice_stop := entryPrice * (1 + sell_stop_loss)
    //if ( low <= entryPrice * (1-trailTrig_short) ) //Enable Trig
    //    sellProfit := close * (1-trail_stop_short)
    //    sellStopValue := sellProfit[1]
    //else
    //    sellProfit := entryPrice * (1-trailTrig_short)

    //if ( high > entryPrice * (1-trailTrig_short) )
    //    sellStopValue := entryPrice * (1 + sell_stop_loss)

        //else
        //    sellStopValue := sellStopValue

    //sellPrice_stop := sellStopValue
else
    
    buyProfit := 0
    buyStopValue := 0
    buyPrice_stop := 0
    sellProfit := 0
    sellStopValue := 0
    sellPrice_stop := 0



if(window())
    if (buyCondition)

        strategy.close('Sell', alert_message = "buy")
        strategy.entry('Buy', strategy.long, alert_message = "buy")
        //strategy.exit('Close Buy', 'Buy', limit=stop_loss_and_tp ? entryPrice * (1 + buy_tp) : na, stop=stop_loss_and_tp ? entryPrice * (1 - buy_stop_loss) : na, trail_price=trail_stop ? entryPrice * (1+trail_stop_long) : na, trail_offset=trail_stop ? entryPrice * (1+trail_stop_long) * trail_stop_long_offset / syminfo.mintick : na, comment_trailing='close trailing', alert_message = "close")
    if (sellCondition)

        strategy.close('Buy', alert_message = "sell")
        strategy.entry('Sell', strategy.short, alert_message = "sell")
        //strategy.exit('Close Sell', 'Sell', limit=stop_loss_and_tp ? entryPrice * (1 - sell_tp) : na, stop=stop_loss_and_tp ? entryPrice * (1 + sell_stop_loss) : na, trail_price=trail_stop ? entryPrice * (1-trail_stop_short) : na, trail_offset=trail_stop ? entryPrice * (1-trail_stop_short) * trail_stop_short_offset / syminfo.mintick: na, comment_trailing='close trailing', alert_message = "close")

    if (strategy.position_size != 0)
        strategy.exit("buyStoploss", "Buy", limit=entryPrice * (1 + buy_tp), stop=buyPrice_stop, alert_message="close")
        strategy.exit("sellStoploss", "Sell",limit=entryPrice * (1 - sell_tp), stop=sellPrice_stop, alert_message="close")

net_profit = strategy.netprofit + strategy.openprofit

plot(net_profit, title='Net Profit', linewidth=2, style=plot.style_area, color=net_profit >= 0 ? #26A69A : color.new(color =color.red  , transp = 50))

// # ========================================================================= #
// #                   |   Print  |
// # ========================================================================= #

plotchar(entryPrice, "entryPrice", "", location = location.top)
plotchar(entryPrice * (1 + buy_tp), "buy_tp", "", location = location.top)
plotchar(entryPrice * (1 - buy_stop_loss), "buy_stop_loss", "", location = location.top)
plotchar(entryPrice * (1+trail_stop_long), "buy_trail_price", "", location = location.top)


plotchar(entryPrice, "entryPrice", "", location = location.top)
plotchar(entryPrice * (1 + sell_tp), "sell_tp", "", location = location.top)
plotchar(entryPrice * (1 - sell_stop_loss), "sell_stop_loss", "", location = location.top)
plotchar(entryPrice * (1+trail_stop_short), "sell_trail_price", "", location = location.top)


plotchar(buySAR, "buySAR", "", location = location.top)
plotchar(sellSAR, "sellSAR", "", location = location.top)
plotchar(buyCondition, "buyCondition", "", location = location.top)
plotchar(sellCondition, "sellCondition", "", location = location.top)
