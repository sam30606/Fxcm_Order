// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sam30606

//@version=5
// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #
strategy("2-1m Scalping", shorttitle="2-1m Scalping", overlay=true)

// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   ADX and DI   |
// # ========================================================================= #


len = input(14)

TrueRange = math.max(math.max(high - low, math.abs(high - nz(close[1]))), math.abs(low - nz(close[1])))
DirectionalMovementPlus = high - nz(high[1]) > nz(low[1]) - low ? math.max(high - nz(high[1]), 0) : 0
DirectionalMovementMinus = nz(low[1]) - low > high - nz(high[1]) ? math.max(nz(low[1]) - low, 0) : 0

SmoothedTrueRange = 0.0
SmoothedTrueRange := nz(SmoothedTrueRange[1]) - nz(SmoothedTrueRange[1]) / len + TrueRange

SmoothedDirectionalMovementPlus = 0.0
SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - nz(SmoothedDirectionalMovementPlus[1]) / len + DirectionalMovementPlus

SmoothedDirectionalMovementMinus = 0.0
SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - nz(SmoothedDirectionalMovementMinus[1]) / len + DirectionalMovementMinus

DIPlus = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
DIMinus = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100


//plot(DIPlus, color=color.new(color.green, 0), title='DI+')
//plot(DIMinus, color=color.new(color.red, 0), title='DI-')





// # ========================================================================= #
// #                   |   ADX and DI for v4  |
// # ========================================================================= #


// # ========================================================================= #
// #                   |   Average True Range Stop Loss Finder  |
// # ========================================================================= #


avg_length = input.int(title='avg_length', defval=14, minval=1)
smoothing = input.string(title='Smoothing', defval='RMA', options=['RMA', 'SMA', 'EMA', 'WMA'])
m = input(0.85, 'Multiplier')
src1 = input(high)
src2 = input(low)
pline = input(true, 'Show Price Lines')
col1 = input(color.blue, 'ATR Text Color')
col2 = input.color(color.teal, 'Low Text Color', inline='1')
col3 = input.color(color.red, 'High Text Color', inline='2')

collong = input.color(color.white, 'Low Line Color', inline='1')
colshort = input.color(color.white, 'High Line Color', inline='2')

ma_function(source, avg_length) =>
    if smoothing == 'RMA'
        ta.rma(source, avg_length)
    else
        if smoothing == 'SMA'
            ta.sma(source, avg_length)
        else
            if smoothing == 'EMA'
                ta.ema(source, avg_length)
            else
                ta.wma(source, avg_length)

a = ma_function(ta.tr(true), avg_length) * m
x = ma_function(ta.tr(true), avg_length) * m + src1
x2 = src2 - ma_function(ta.tr(true), avg_length) * m

p1 = plot(x, title='ATR Short Stop Loss', color=colshort, trackprice=pline ? true : false)
p2 = plot(x2, title='ATR Long Stop Loss', color=collong, trackprice=pline ? true : false)

var table Table = table.new(position.bottom_center, 3, 1, border_width=3)

f_fillCell(_table, _column, _row, _value, _timeframe) =>

    _cellText = _timeframe + str.tostring(_value, '#.#')
    table.cell(_table, _column, _row, _cellText, text_color=col1)
    table.cell_set_text_color(Table, 1, 0, color.new(col3, transp=0))
    table.cell_set_text_color(Table, 2, 0, color.new(col2, transp=0))

if barstate.islast
    f_fillCell(Table, 0, 0, a, 'ATR: ')
    f_fillCell(Table, 1, 0, x, 'H: ')
    f_fillCell(Table, 2, 0, x2, 'L: ')




// # ========================================================================= #
// #                   |   Average True Range Stop Loss Finder  |
// # ========================================================================= #


// # ========================================================================= #
// #                   |   Chandelier Exit  |
// # ========================================================================= #

length = input.int(title='ATR Period', defval=22)
mult = input.float(title='ATR Multiplier', step=0.1, defval=3.0)
showLabels = input(title='Show Buy/Sell Labels ?', defval=true)
useClose = input(title='Use Close Price for Extremums ?', defval=true)
highlightState = input(title='Highlight State ?', defval=true)

atr = mult * ta.atr(length)

longStop = (useClose ? ta.highest(close, length) : ta.highest(length)) - atr
longStopPrev = nz(longStop[1], longStop)
longStop := close[1] > longStopPrev ? math.max(longStop, longStopPrev) : longStop

shortStop = (useClose ? ta.lowest(close, length) : ta.lowest(length)) + atr
shortStopPrev = nz(shortStop[1], shortStop)
shortStop := close[1] < shortStopPrev ? math.min(shortStop, shortStopPrev) : shortStop

var int dir = 1
dir := close > shortStopPrev ? 1 : close < longStopPrev ? -1 : dir

longColor = color.new(color.green, 90)
shortColor = color.new(color.red, 90)

longStopPlot = plot(dir == 1 ? longStop : na, title='Long Stop', style=plot.style_linebr, linewidth=2, color=color.new(longColor, 0))
buySignal = dir == 1 and dir[1] == -1
plotshape(buySignal ? longStop : na, title='Long Stop Start', location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(longColor, 0))
plotshape(buySignal and showLabels ? longStop : na, title='Buy Label', text='Buy', location=location.absolute, style=shape.labelup, size=size.tiny, color=color.new(longColor, 0), textcolor=color.new(color.white, 0))

shortStopPlot = plot(dir == 1 ? na : shortStop, title='Short Stop', style=plot.style_linebr, linewidth=2, color=color.new(shortColor, 0))
sellSignal = dir == -1 and dir[1] == 1
plotshape(sellSignal ? shortStop : na, title='Short Stop Start', location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(shortColor, 0))
plotshape(sellSignal and showLabels ? shortStop : na, title='Sell Label', text='Sell', location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.new(shortColor, 0), textcolor=color.new(color.white, 0))

midPricePlot = plot(ohlc4, title='', style=plot.style_circles, linewidth=0, display=display.none, editable=false)

longFillColor = highlightState ? dir == 1 ? longColor : na : na
shortFillColor = highlightState ? dir == -1 ? shortColor : na : na
fill(midPricePlot, longStopPlot, title='Long State Filling', color=longFillColor)
fill(midPricePlot, shortStopPlot, title='Short State Filling', color=shortFillColor)

//changeCond = dir != dir[1]
//alertcondition(changeCond, title='Alert: CE Direction Change', message='Chandelier Exit has changed direction!')
//alertcondition(buySignal, title='Alert: CE Buy', message='Chandelier Exit Buy!')
//alertcondition(sellSignal, title='Alert: CE Sell', message='Chandelier Exit Sell!')

// # ========================================================================= #
// #                   |   Chandelier Exit  |
// # ========================================================================= #



if (buySignal)
    strategy.entry("BUY",strategy.long ,alert_message = "buy")
    strategy.exit("CLOSE BUY","BUY", stop=(close)*0.995,alert_message="close")

if (sellSignal)
    strategy.entry("SELL",strategy.short ,alert_message = "sell")
    strategy.exit("CLOSE SELL","SELL", stop=(close)*1.005,alert_message="close")





// # ========================================================================= #
// #                   |   Print  |
// # ========================================================================= #


plotchar(x, "ATR Short Stop Loss", "", location = location.top)
plotchar(x2, "ATR Long Stop Loss", "", location = location.top)
plotchar(longStop, "longStop", "", location = location.top)
plotchar(shortStop, "shortStop", "", location = location.top)
plotchar(buySignal, "buySignal", "", location = location.top)
plotchar(sellSignal, "sellSignal", "", location = location.top)


// # ========================================================================= #
// #                   |   Print  |
// # ========================================================================= #

