// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sam30606

//@version=5
// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #
strategy("6-Scalping", shorttitle="6-Scalping", overlay=true)

// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Moving Average Exponential  |
// # ========================================================================= #

len = input.int(200, minval=1, title="Length", group="EMA Settings")
emaSrc = input(close, title="Source", group="EMA Settings")
offset = input.int(title="Offset", defval=0, minval=-500, maxval=500, group="EMA Settings")
emaOut = ta.ema(emaSrc, len)


// # ========================================================================= #
// #                   |   Moving Average Exponential  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Relative Strength Index  |
// # ========================================================================= #


rsiLengthInput = input.int(7, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
maTypeInput = input.string("SMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Settings")
maLengthInput = input.int(14, title="MA Length", group="MA Settings")
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group="MA Settings")

rsiUp = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsiDown = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = rsiDown == 0 ? 100 : rsiUp == 0 ? 0 : 100 - (100 / (1 + rsiUp / rsiDown))

// # ========================================================================= #
// #                   |   Relative Strength Index  |
// # ========================================================================= #


// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #

adxlen = input(14, title="ADX Smoothing", group="ADX settings")
dilen = input(14, title="DI Length", group="ADX settings")
dirmov(len) =>
	adxUp = ta.change(high)
	adxDown = -ta.change(low)
	plusDM = na(adxUp) ? na : (adxUp > adxDown and adxUp > 0 ? adxUp : 0)
	minusDM = na(adxDown) ? na : (adxDown > adxUp and adxDown > 0 ? adxDown : 0)
	truerange = ta.rma(ta.tr, len)
	plus = fixnan(100 * ta.rma(plusDM, len) / truerange)
	minus = fixnan(100 * ta.rma(minusDM, len) / truerange)
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
sig = adx(dilen, adxlen)
// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #




// # ========================================================================= #
// #                   |   ADX and DI  |
// # ========================================================================= #
adxDIlen = input(14)


TrueRange = math.max(math.max(high - low, math.abs(high - nz(close[1]))), math.abs(low - nz(close[1])))
DirectionalMovementPlus = high - nz(high[1]) > nz(low[1]) - low ? math.max(high - nz(high[1]), 0) : 0
DirectionalMovementMinus = nz(low[1]) - low > high - nz(high[1]) ? math.max(nz(low[1]) - low, 0) : 0

SmoothedTrueRange = 0.0
SmoothedTrueRange := nz(SmoothedTrueRange[1]) - nz(SmoothedTrueRange[1]) / adxDIlen + TrueRange

SmoothedDirectionalMovementPlus = 0.0
SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - nz(SmoothedDirectionalMovementPlus[1]) / adxDIlen + DirectionalMovementPlus

SmoothedDirectionalMovementMinus = 0.0
SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - nz(SmoothedDirectionalMovementMinus[1]) / adxDIlen + DirectionalMovementMinus

DIPlus = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
DIMinus = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100

// # ========================================================================= #
// #                   |   ADX and DI  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Stochastic  |
// # ========================================================================= #

periodK = input.int(7, title="%K Length", minval=1)
smoothK = input.int(3, title="%K Smoothing", minval=1)
periodD = input.int(3, title="%D Smoothing", minval=1)
k = ta.sma(ta.stoch(close, high, low, periodK), smoothK)
d = ta.sma(k, periodD)
//plot(k, title="%K", color=#2962FF)
//plot(d, title="%D", color=#FF6D00)
// # ========================================================================= #
// #                   |   Stochastic  |
// # ========================================================================= #

var float entryPrice = 0.0
var float enableTrigPrice = 0.0
var float buyATRLoss = 0.0
var float sellATRLoss = 0.0
var float price_stop = 0.0
var float price_limit = 0.0

var bool trailTrigEnable = false

fromYear = input.int(defval=2022, title='From Year', minval=2020, group="Back Test Settings")
fromMomth = input.int(defval=8, title='From Month', minval=1, maxval=12, group="Back Test Settings")
fromDay = input.int(defval=9, title='From Day', minval=1, maxval=31, group="Back Test Settings")
toYear = input.int(defval=2300, title='To Year', minval=2020, group="Back Test Settings")
toMomth = input.int(defval=1, title='To Month', minval=1, maxval=12, group="Back Test Settings")
toDay = input.int(defval=1, title='To Day', minval=1, maxval=31, group="Back Test Settings")

timeStart = timestamp(fromYear, fromMomth, fromDay, 00, 00)
timeFinish = timestamp(toYear, toMomth, toDay, 23, 59)
window()=>time>=timeStart and time <= timeFinish ? true : false

stop_loss_and_tp = input(title='Enable Stop Loss and Take Profit', defval=true, group="Trace Stop Settings")
trail_stop = input(title='Enable Trail Stop', defval=true, group="Trace Stop Settings")
buy_stop_loss = input.float(1.5, title='buy_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
sell_stop_loss = input.float(2, title='sell_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
buy_tp = input.float(10, title='buy_tp %', step = 0.1, group="Trace Stop Settings")/100
sell_tp = input.float(10, title='sell_tp %', step = 0.1, group="Trace Stop Settings")/100
trailTrig_long = input.float(2.2, title='trailTrig_long %', step = 0.1, group="Trace Stop Settings")/100
trailTrig_short = input.float(0.8, title='trailTrig_short %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_long = input.float(0.5, title='trail_stop_long %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_short = input.float(0.1, title='trail_stop_short %', step = 0.1, group="Trace Stop Settings")/100

adxLowest = input.float(28, title='ADX Lowest', step = 0.1, group="Trade Settings")
adxPass = sig > adxLowest
buyEMA = low > emaOut
sellEMA = high < emaOut 
// you can set your own logic here

buyRSI = rsi > 50
sellRSI = rsi < 50

buyStoch = ta.crossover(k, d)
sellStoch =ta.crossunder(k, d)

buyCondition = adxPass and buyEMA and buyRSI and buyStoch and strategy.position_size == 0
sellCondition = adxPass and sellEMA and sellRSI and sellStoch and strategy.position_size == 0

// you can set your own logic here

if (strategy.position_size > 0)
    entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1)
    price_stop := entryPrice * (1-buy_stop_loss)
    price_limit := ta.crossover(rsi, 70) ? close : na

else if (strategy.position_size < 0)
    entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1) 
    price_stop := entryPrice * (1+sell_stop_loss)
    price_limit := ta.crossunder(rsi, 30) ? close : na
else
    entryPrice := 0
    price_stop := 0
    enableTrigPrice := 0
    trailTrigEnable := false


if(window())
    if (buyCondition)
        strategy.entry('Buy', strategy.long, alert_message = "buy")
    if (sellCondition)
        strategy.entry('Sell', strategy.short, alert_message = "sell")
    if (strategy.position_size != 0)
        strategy.exit("buyStoploss", "Buy", limit=price_limit, stop=price_stop, alert_message="close")
        strategy.exit("sellStoploss", "Sell",limit=price_limit, stop=price_stop, alert_message="close")

net_profit = strategy.netprofit + strategy.openprofit


plot(net_profit, title='Net Profit', linewidth=2, style=plot.style_area, color=net_profit >= 0 ? #26A69A : color.new(color =color.red  , transp = 50))

// # ========================================================================= #
// #                   |   Print  |
// # ========================================================================= #

plotchar(sig, "ATR", "", location = location.top)
plotchar(entryPrice, "entryPrice", "", location = location.top)

plotchar(price_limit, "price_limit", "", location = location.top)
plotchar(price_stop, "price_stop", "", location = location.top)
plotchar(buyATRLoss, "buyATRLoss", "", location = location.top)
plotchar(sellATRLoss, "sellATRLoss", "", location = location.top)


plotchar(buyCondition, "buyCondition", "", location = location.top)
plotchar(sellCondition, "sellCondition", "", location = location.top)
