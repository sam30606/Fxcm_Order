// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sam30606

//@version=5
// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #
strategy("5-Scalping-2", shorttitle="5-Scalping-2", overlay=true)

// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Moving Average Exponential  |
// # ========================================================================= #

len = input.int(140, minval=1, title="Length", group="EMA Settings")
src = input(close, title="Source", group="EMA Settings")
offset = input.int(title="Offset", defval=0, minval=-500, maxval=500, group="EMA Settings")
emaOut = ta.ema(src, len)
plot(emaOut, title="EMA", color=color.blue, offset=offset)

ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

typeMA = input.string(title = "Method", defval = "SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="Smoothing")
smoothingLength = input.int(title = "Length", defval = 5, minval = 1, maxval = 100, group="Smoothing")

smoothingLine = ma(emaOut, smoothingLength, typeMA)
//plot(smoothingLine, title="Smoothing Line", color=#f37f20, offset=offset, display=display.none)


// # ========================================================================= #
// #                   |   Moving Average Exponential  |
// # ========================================================================= #


// # ========================================================================= #
// #                   |   Relative Strength Index  |
// # ========================================================================= #


rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
maTypeInput = input.string("SMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Settings")
maLengthInput = input.int(14, title="MA Length", group="MA Settings")
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group="MA Settings")

rsiUp = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsiDown = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = rsiDown == 0 ? 100 : rsiUp == 0 ? 0 : 100 - (100 / (1 + rsiUp / rsiDown))

// # ========================================================================= #
// #                   |   Relative Strength Index  |
// # ========================================================================= #


// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #

adxlen = input(14, title="ADX Smoothing", group="ADX settings")
dilen = input(14, title="DI Length", group="ADX settings")
dirmov(len) =>
	adxUp = ta.change(high)
	adxDown = -ta.change(low)
	plusDM = na(adxUp) ? na : (adxUp > adxDown and adxUp > 0 ? adxUp : 0)
	minusDM = na(adxDown) ? na : (adxDown > adxUp and adxDown > 0 ? adxDown : 0)
	truerange = ta.rma(ta.tr, len)
	plus = fixnan(100 * ta.rma(plusDM, len) / truerange)
	minus = fixnan(100 * ta.rma(minusDM, len) / truerange)
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
sig = adx(dilen, adxlen)
// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #


// # ========================================================================= #
// #                   |   Engulfing - Bullish  |
// # ========================================================================= #
C_DownTrend = true
C_UpTrend = true

C_Len = 14 // ta.ema depth for bodyAvg
C_BodyHi = math.max(close, open)
C_BodyLo = math.min(close, open)
C_Body = C_BodyHi - C_BodyLo
C_BodyAvg = ta.ema(C_Body, C_Len)
C_SmallBody = C_Body < C_BodyAvg
C_LongBody = C_Body > C_BodyAvg
C_WhiteBody = open < close
C_BlackBody = open > close

C_EngulfingBearish = C_UpTrend and C_BlackBody and C_LongBody and C_WhiteBody[1] and C_SmallBody[1] and close <= open[1] and open >= close[1] and ( close < open[1] or open > close[1] )
C_EngulfingBullish = C_DownTrend and C_WhiteBody and C_LongBody and C_BlackBody[1] and C_SmallBody[1] and close >= open[1] and open <= close[1] and ( close > open[1] or open < close[1] )
// # ========================================================================= #
// #                   |   Engulfing - Bullish  |
// # ========================================================================= #




var float entryPrice = 0.0
var float enableTrigPrice = 0.0
var float price_stop = 0.0

var bool trailTrigEnable = false

fromYear = input.int(defval=2022, title='From Year', minval=2020, group="Back Test Settings")
fromMomth = input.int(defval=8, title='From Month', minval=1, maxval=12, group="Back Test Settings")
fromDay = input.int(defval=9, title='From Day', minval=1, maxval=31, group="Back Test Settings")
toYear = input.int(defval=2300, title='To Year', minval=2020, group="Back Test Settings")
toMomth = input.int(defval=1, title='To Month', minval=1, maxval=12, group="Back Test Settings")
toDay = input.int(defval=1, title='To Day', minval=1, maxval=31, group="Back Test Settings")

timeStart = timestamp(fromYear, fromMomth, fromDay, 00, 00)
timeFinish = timestamp(toYear, toMomth, toDay, 23, 59)
window()=>time>=timeStart and time <= timeFinish ? true : false

stop_loss_and_tp = input(title='Enable Stop Loss and Take Profit', defval=true, group="Trace Stop Settings")
trail_stop = input(title='Enable Trail Stop', defval=true, group="Trace Stop Settings")
buy_stop_loss = input.float(1.5, title='buy_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
sell_stop_loss = input.float(2, title='sell_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
buy_tp = input.float(10, title='buy_tp %', step = 0.1, group="Trace Stop Settings")/100
sell_tp = input.float(10, title='sell_tp %', step = 0.1, group="Trace Stop Settings")/100
trailTrig_long = input.float(2.2, title='trailTrig_long %', step = 0.1, group="Trace Stop Settings")/100
trailTrig_short = input.float(0.8, title='trailTrig_short %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_long = input.float(0.5, title='trail_stop_long %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_short = input.float(0.1, title='trail_stop_short %', step = 0.1, group="Trace Stop Settings")/100

adxLowest = input.float(28, title='ADX Lowest', step = 0.1, group="Trade Settings")
adxPass = sig >adxLowest ? true : na
// you can set your own logic here

emaGap = input.float(0, title='EMA gap %', step = 0.01, group="Trade Settings")/100

buyEMA = low > emaOut * (1+emaGap) ? true :false
sellEMA = high < emaOut * (1-emaGap) ? true :false

buyRSI = rsi > 50
sellRSI = rsi < 50

buyCondition = buyEMA and C_EngulfingBullish and buyRSI and strategy.position_size == 0 and adxPass
sellCondition =  sellEMA and C_EngulfingBearish and sellRSI and strategy.position_size == 0 and adxPass

// you can set your own logic here

if (strategy.position_size > 0)
    entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1)
    enableTrigPrice := enableTrigPrice ? enableTrigPrice : entryPrice
    if (close >= enableTrigPrice * (1 + trailTrig_long))
        trailTrigEnable := true
        price_stop := enableTrigPrice * (1 + trail_stop_long)
        enableTrigPrice := price_stop
    else if (close < entryPrice * (1 + trailTrig_long) and trailTrigEnable == false)
        price_stop := entryPrice * (1 - buy_stop_loss)

else if (strategy.position_size < 0)
    entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1) 
    enableTrigPrice := enableTrigPrice ? enableTrigPrice : entryPrice
    if (close <= enableTrigPrice * (1 - trailTrig_short))
        trailTrigEnable := true
        price_stop := enableTrigPrice * (1 - trail_stop_short)
        enableTrigPrice := price_stop
    else if (close > entryPrice * (1 - trailTrig_short) and trailTrigEnable == false)
        price_stop := entryPrice * (1 + sell_stop_loss)

else
    entryPrice := 0
    price_stop := 0
    enableTrigPrice := 0
    trailTrigEnable := false


if(window())
    if (buyCondition)
        strategy.entry('Buy', strategy.long, alert_message = "buy")

    if (sellCondition)
        strategy.entry('Sell', strategy.short, alert_message = "sell")

    if (strategy.position_size != 0)
        strategy.exit("buyStoploss", "Buy", limit=entryPrice * (1 + buy_tp), stop=price_stop, alert_message="close")
        strategy.exit("sellStoploss", "Sell",limit=entryPrice * (1 - sell_tp), stop=price_stop, alert_message="close")

net_profit = strategy.netprofit + strategy.openprofit


plot(net_profit, title='Net Profit', linewidth=2, style=plot.style_area, color=net_profit >= 0 ? #26A69A : color.new(color =color.red  , transp = 50))

// # ========================================================================= #
// #                   |   Print  |
// # ========================================================================= #

plotchar(sig, "ATR", "", location = location.top)
plotchar(entryPrice, "entryPrice", "", location = location.top)
plotchar(entryPrice * (1+buy_tp), "buy_tp", "", location = location.top)
plotchar(entryPrice * (1+trailTrig_long) , "buytrig", "", location = location.top)
plotchar(trailTrigEnable , "trailTrigEnable", "", location = location.top)

plotchar(close >= enableTrigPrice * (1 + trailTrig_long), "trig1", "", location = location.top)


plotchar(enableTrigPrice, "enableTrigPrice", "", location = location.top)
plotchar(price_stop, "price_stop", "", location = location.top)


plotchar(buyCondition, "buyCondition", "", location = location.top)
plotchar(sellCondition, "sellCondition", "", location = location.top)
