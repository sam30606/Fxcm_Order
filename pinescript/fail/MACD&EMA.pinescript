// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © sam30606

//@version=5
// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #
strategy("MACD&EMA", shorttitle="MACD&EMA", overlay=true)

// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Moving Average Exponential  |
// # ========================================================================= #

len = input.int(190, minval=1, title="Length", group="EMA Settings")
emaSrc = input(close, title="Source", group="EMA Settings")
offset = input.int(title="Offset", defval=0, minval=-500, maxval=500, group="EMA Settings")
emaOut = ta.ema(emaSrc, len)
plot(emaOut, title="EMA", color=color.blue, offset=offset)

//ma(source, length, type) =>
//    switch type
//        "SMA" => ta.sma(source, length)
//        "EMA" => ta.ema(source, length)
//        "SMMA (RMA)" => ta.rma(source, length)
//        "WMA" => ta.wma(source, length)
//        "VWMA" => ta.vwma(source, length)

//typeMA = input.string(title = "Method", defval = "SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="Smoothing")
//smoothingLength = input.int(title = "Length", defval = 5, minval = 1, maxval = 100, group="Smoothing")

//smoothingLine = ma(emaOut, smoothingLength, typeMA)
//plot(smoothingLine, title="Smoothing Line", color=#f37f20, offset=offset, display=display.none)


// # ========================================================================= #
// #                   |   Moving Average Exponential  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Moving Average Convergence Divergenc  |
// # ========================================================================= #

// Getting inputs
macdTime = input.timeframe('D', "Timeframe", group="MACD Settings")
fast_length = input(title="Fast Length", defval=12, group="MACD Settings")
slow_length = input(title="Slow Length", defval=26, group="MACD Settings")
macdSrc = input(title="Source", defval=close, group="MACD Settings")
signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9, group="MACD Settings")
sma_source = input.string(title="Oscillator MA Type",  defval="EMA", options=["SMA", "EMA"], group="MACD Settings")
sma_signal = input.string(title="Signal Line MA Type", defval="EMA", options=["SMA", "EMA"], group="MACD Settings")
// Plot colors
//col_macd = input(#2962FF, "MACD Line  ", group="Color Settings", inline="MACD", group="MACD Settings")
//col_signal = input(#FF6D00, "Signal Line  ", group="Color Settings", inline="Signal", group="MACD Settings")
//col_grow_above = input(#26A69A, "Above   Grow", group="Histogram", inline="Above", group="MACD Settings")
//col_fall_above = input(#B2DFDB, "Fall", group="Histogram", inline="Above", group="MACD Settings")
//col_grow_below = input(#FFCDD2, "Below Grow", group="Histogram", inline="Below", group="MACD Settings")
//col_fall_below = input(#FF5252, "Fall", group="Histogram", inline="Below", group="MACD Settings")
// Calculating
fast_ma = sma_source == "SMA" ? request.security(syminfo.tickerid, macdTime, ta.sma(macdSrc, fast_length)) : request.security(syminfo.tickerid, macdTime, ta.ema(macdSrc, fast_length))
slow_ma = sma_source == "SMA" ? request.security(syminfo.tickerid, macdTime, ta.sma(macdSrc, slow_length)) : request.security(syminfo.tickerid, macdTime, ta.ema(macdSrc, slow_length))
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? request.security(syminfo.tickerid, macdTime, ta.sma(macd, signal_length)) : request.security(syminfo.tickerid, macdTime, ta.ema(macd, signal_length))
hist = macd - signal

//hline(0, "Zero Line", color=color.new(#787B86, 50))
//plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
//plot(macd, title="MACD", color=col_macd)
//plot(signal, title="Signal", color=col_signal)
// # ========================================================================= #
// #                   |   Moving Average Convergence Divergenc  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #

adxlen = input(14, title="ADX Smoothing", group="ADX settings")
dilen = input(14, title="DI Length", group="ADX settings")
dirmov(len) =>
	up = ta.change(high)
	down = -ta.change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = ta.rma(ta.tr, len)
	plus = fixnan(100 * ta.rma(plusDM, len) / truerange)
	minus = fixnan(100 * ta.rma(minusDM, len) / truerange)
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
sig = adx(dilen, adxlen)
// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #

var float entryPrice=0.0

var float buyProfit=0.0
var float buyStopValue=0.0
var float buyPrice_stop=0.0

var float sellProfit=0.0
var float sellStopValue=0.0
var float sellPrice_stop=0.0

fromYear = input.int(defval=2022, title='From Year', minval=2020, group="Back Test Settings")
fromMomth = input.int(defval=6, title='From Month', minval=1, maxval=12, group="Back Test Settings")
fromDay = input.int(defval=1, title='From Day', minval=1, maxval=31, group="Back Test Settings")
toYear = input.int(defval=2300, title='To Year', minval=2020, group="Back Test Settings")
toMomth = input.int(defval=1, title='To Month', minval=1, maxval=12, group="Back Test Settings")
toDay = input.int(defval=1, title='To Day', minval=1, maxval=31, group="Back Test Settings")

timeStart = timestamp(fromYear, fromMomth, fromDay, 00, 00)
timeFinish = timestamp(toYear, toMomth, toDay, 23, 59)
window()=>time>=timeStart and time <= timeFinish ? true : false

stop_loss_and_tp = input(title='Enable Stop Loss and Take Profit', defval=true, group="Trace Stop Settings")
trail_stop = input(title='Enable Trail Stop', defval=true, group="Trace Stop Settings")
buy_stop_loss = input.float(3, title='buy_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
sell_stop_loss = input.float(3, title='sell_stop_loss %', step = 0.1, group="Trace Stop Settings")/100
buy_tp = input.float(30, title='buy_tp %', step = 0.1, group="Trace Stop Settings")/100
sell_tp = input.float(30, title='sell_tp %', step = 0.1, group="Trace Stop Settings")/100
trailTrig_long = input.float(0.8, title='trailTrig_long %', step = 0.1, group="Trace Stop Settings")/100
trailTrig_short = input.float(0.8, title='trailTrig_short %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_long = input.float(1.3, title='trail_stop_long %', step = 0.1, group="Trace Stop Settings")/100
trail_stop_short = input.float(1.3, title='trail_stop_short %', step = 0.1, group="Trace Stop Settings")/100

adxLowest = input.float(20, title='ADX Lowest', step = 0.1, group="Trade Settings")
// you can set your own logic here

buyEMA = low >= emaOut
sellEMA = high <= emaOut and low <= emaOut*0.98

buyMACD = ta.crossover(macd, signal) and macd < 0 and signal< 0
sellMACD = ta.crossunder(macd, signal) and macd > 0 and signal> 0

buyCondition = buyEMA and buyMACD and sig > adxLowest
sellCondition = sellEMA and sellMACD and sig > adxLowest


if strategy.position_size != 0
    entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1)
    if ( high >= entryPrice * (1+trailTrig_long) )
        buyProfit := close * (1+trail_stop_long)
        buyStopValue := buyProfit[1]
    else
        buyProfit := entryPrice * (1+trailTrig_long)

    if ( low < entryPrice * (1+trailTrig_long) )
        buyStopValue := entryPrice * (1 - buy_stop_loss)
    else
        buyStopValue := buyStopValue

    buyPrice_stop := buyStopValue


    if ( low <= entryPrice * (1-trailTrig_short) ) //Enable Trig
        sellProfit := close * (1-trail_stop_short)
        sellStopValue := sellProfit[1]
    else
        sellProfit := entryPrice * (1-trailTrig_short)

    if ( high > entryPrice * (1-trailTrig_short) )
        sellStopValue := entryPrice * (1 + sell_stop_loss)

    else
        sellStopValue := sellStopValue

    sellPrice_stop := sellStopValue
else
    
    buyProfit := 0
    buyStopValue := 0
    buyPrice_stop := 0
    sellProfit := 0
    sellStopValue := 0
    sellPrice_stop := 0



if(window())
    if (buyCondition)


        strategy.entry('Buy', strategy.long, alert_message = "buy")
        //strategy.exit('Close Buy', 'Buy', limit=stop_loss_and_tp ? entryPrice * (1 + buy_tp) : na, stop=stop_loss_and_tp ? entryPrice * (1 - buy_stop_loss) : na, trail_price=trail_stop ? entryPrice * (1+trail_stop_long) : na, trail_offset=trail_stop ? entryPrice * (1+trail_stop_long) * trail_stop_long_offset / syminfo.mintick : na, comment_trailing='close trailing', alert_message = "close")
    if (sellCondition)

        strategy.entry('Sell', strategy.short, alert_message = "sell")
        //strategy.exit('Close Sell', 'Sell', limit=stop_loss_and_tp ? entryPrice * (1 - sell_tp) : na, stop=stop_loss_and_tp ? entryPrice * (1 + sell_stop_loss) : na, trail_price=trail_stop ? entryPrice * (1-trail_stop_short) : na, trail_offset=trail_stop ? entryPrice * (1-trail_stop_short) * trail_stop_short_offset / syminfo.mintick: na, comment_trailing='close trailing', alert_message = "close")

    if (strategy.position_size != 0)
        strategy.exit("buyStoploss", "Buy", limit=entryPrice * (1 + buy_tp), stop=buyPrice_stop, alert_message="close")
        strategy.exit("sellStoploss", "Sell",limit=entryPrice * (1 - sell_tp), stop=sellPrice_stop, alert_message="close")
net_profit = strategy.netprofit + strategy.openprofit

//plot(net_profit, title='Net Profit', linewidth=2, style=plot.style_area, color=net_profit >= 0 ? #26A69A : color.new(color =color.red  , transp = 50))



// plotchar(buyEMA, "buyEMA", "", location = location.top)
// plotchar(sellEMA, "sellEMA", "", location = location.top)
// plotchar(buyMACD, "buyMACD", "", location = location.top)
// plotchar(sellMACD, "sellMACD", "", location = location.top)
// plotchar(buyCondition, "buyCondition", "", location = location.top)
// plotchar(sellCondition, "sellCondition", "", location = location.top)
// plotchar(strategy.position_avg_price-close/syminfo.mintick, "close/syminfo.mintick", "", location = location.top)

plotchar(entryPrice, "entryPrice", "", location = location.top)
plotchar(entryPrice * (1-buy_tp), "buy_tp", "", location = location.top)
plotchar(entryPrice * (1-trailTrig_short) , "buytrig", "", location = location.top)
plotchar( open >= entryPrice * (1+trailTrig_long), "trig1", "", location = location.top)
plotchar(low < entryPrice * (1+trailTrig_long), "trig2", "", location = location.top)

plotchar(high, "high", "", location = location.top)
plotchar(buyProfit, "buyProfit", "", location = location.top)
plotchar(buyProfit[1], "buyProfit[1]", "", location = location.top)
plotchar(buyStopValue, "buyStopValue", "", location = location.top)
plotchar(buyPrice_stop, "buyPrice_stop", "", location = location.top)
plotchar(strategy.opentrades.entry_price(strategy.opentrades - 1), "entry_price", "", location = location.top)