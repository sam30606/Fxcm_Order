// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © sam30606

//@version=5
// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #
strategy("10-MACD+SAR+VO+Sessions", shorttitle="10-MACD+SAR+VO+Sessions", overlay=true , default_qty_type=strategy.percent_of_equity, default_qty_value=100, initial_capital=10000,commission_value=0.036 )

// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #
var groupADX = "Average Directional Index Settings"

enableADX = input.bool(1, title = "Enable ADX?", group = groupADX) 
timeADX = input.timeframe('5', "Timeframe", group=groupADX)
lenADX = input(14, title="ADX Smoothing", group=groupADX)
lenDI = input(14, title="DI Length", group=groupADX)
lowestADX = input.float(32, title='ADX Lowest', step = 0.1, group=groupADX)

dirmov(_len) =>
	up = ta.change(high)
	down = -ta.change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = ta.rma(ta.tr, _len)
	plus = fixnan(100 * ta.rma(plusDM, _len) / truerange)
	minus = fixnan(100 * ta.rma(minusDM, _len) / truerange)
	[plus, minus]
adx(lenDI, lenADX) =>
	[plus, minus] = dirmov(lenDI)
	sum = plus + minus
	adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), lenADX)
sig = request.security(syminfo.tickerid, timeADX, adx(lenDI, lenADX))
// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Volume Flow Indicator [LazyBear]  |
// # ========================================================================= #
// @author LazyBear
var groupVFI = "Volume Flow Indicator Settings"

enableVFI = input.bool(1, title = "Enable VFI?", group = groupVFI) 
lengthVFI = input(130, title='VFI length', group = groupVFI)
coef = input(1, group = groupVFI)
vcoef = input(3.4, title='Max. vol. cutoff', group = groupVFI)
smoothVFI = input(false, group = groupVFI)

ma(x, y) =>
    sma_1 = ta.sma(x, y)
    smoothVFI ? sma_1 : x

typical = hlc3
inter = math.log(typical) - math.log(typical[1])
vinter = ta.stdev(inter, 30)
cutoff = coef * vinter * close
vave = ta.sma(volume, lengthVFI)[1]
vmax = vave * vcoef
vc = volume < vmax ? volume : vmax  //min( volume, vmax )
mf = typical - typical[1]
iff_1 = mf < -cutoff ? -vc : 0
vcp = mf > cutoff ? vc : iff_1

vfi = ma(math.sum(vcp, lengthVFI) / vave, 3)

//plot(vfi, title='vfi', color=color.new(color.green, 0), linewidth=2)
// # ========================================================================= #
// #                   |   Volume Flow Indicator [LazyBear]  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   ATR Bands  |
// # ========================================================================= #
var groupATR = "ATR Bands Settings"

// Inputs
atrPeriod = input.int(title='ATR Period', defval=14, minval=1, group = groupATR)
srcUpper = input(title='Source Upper', defval=close, inline = "ATRSource", group = groupATR)
srcLower = input(title='Source Lower', defval=close, inline = "ATRSource",group = groupATR)
atrMultiplierUpper = input.float(title='ATR Multiplier Upper', defval=3, inline = "ATRMult",group = groupATR)
atrMultiplierLower = input.float(title='ATR Multiplier Lower', defval=3, inline = "ATRMult",group = groupATR)

// ATR
atr = ta.atr(atrPeriod)

// Plotting
//plot(srcUpper + atr * atrMultiplierUpper, color=color.new(color.green, 0))
//plot(srcLower - atr * atrMultiplierLower, color=color.new(color.red, 0))
// # ========================================================================= #
// #                   |   ATR Bands  |
// # ========================================================================= #
// # ========================================================================= #
// #                   |   MACD 4C  |
// # ========================================================================= #
//MACD 4C by vkno422 + signal line - squattter by squattter v5

var groupMACD4C = "MACD 4C Settings"

fastMA = input.int(title='Fast moving average', defval=12, minval=7, group = groupMACD4C)
slowMA = input.int(title='Slow moving average', defval=26, minval=7, group = groupMACD4C)
lastColor = color.yellow
[currMacd, _, _] = ta.macd(close[0], fastMA, slowMA, 9)
[prevMacd, _, _] = ta.macd(close[1], fastMA, slowMA, 9)

signalLength = input.int(9, minval=1, group = groupMACD4C)
signal = ta.sma(currMacd, signalLength)


//plotColor = currMacd > 0 ? currMacd > prevMacd ? color.lime : color.green : currMacd < prevMacd ? color.maroon : color.red
//plot(currMacd, style=plot.style_columns, color=plotColor, linewidth=3, transp=20)
//plot(0, title='Zero line', linewidth=1, color=color.new(color.gray, 0))
//plot(signal, color=color.new(color.white, 0), title='Signal')

buyMACD = signal[1] > 0 and currMacd > prevMacd and currMacd > signal and currMacd - signal > 0.05
sellMACD = signal[1] < 0 and currMacd < prevMacd and currMacd < signal and signal - currMacd > 0.05
// # ========================================================================= #
// #                   |   MACD 4C  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Parabolic SAR  |
// # ========================================================================= #
// Copyright (c) 2019-present, Alex Orekhov (everget)

var groupSAR = "Parabolic SAR Settings"

start = input.float(title='Start', step=0.00005, defval=0.00252, group = groupSAR)
increment = input.float(title='Increment', step=0.00005, defval=0.00133, group = groupSAR)
maximum = input.float(title='Maximum', step=0.01, defval=0.220, group = groupSAR)
width = input.int(title='Point Width', minval=1, defval=20, group = groupSAR)
highlightStartPoints = input(title='Highlight Start Points ?', defval=true, group = groupSAR)

psar = ta.sar(start, increment, maximum)
dir = psar < close ? 1 : -1

psarColor = psar < close ? #3388bb : #fdcc02

//barcolor(dir == 1 ? color.green : color.red)

buySAR = dir == 1
sellSAR = dir == -1
// # ========================================================================= #
// #                   |   Parabolic SAR  |
// # ========================================================================= #
// # ========================================================================= #
// #                   |   Volatility Oscillator  |
// # ========================================================================= #

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © veryfid

var groupVO = "Volatility Oscillator Settings"

VOLength = input(100, title = "VOLength", group = groupVO)
spike = close - open
x = ta.stdev(spike, VOLength)
y = ta.stdev(spike, VOLength) * -1

//plot(spike, color=color.new(color.white, 0), linewidth=2, title='Spike Linel')

//p1 = plot(x, 'Upper Line')
//p2 = plot(y, 'Lower Line')

//plot(0, color=color.new(color.gray, 0), title='Zero Line')

//plot(spike, color=color.new(color.blue, 80), style=plot.style_area, title='Spike Fill')

buyVO = spike > x
sellVO = spike < y
// # ========================================================================= #
// #                   |   Volatility Oscillator  |
// # ========================================================================= #
// # ========================================================================= #
// #                   |   Session  |
// # ========================================================================= #
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Aurocks_AIF
///Sessions

var groupSession = "Session Settings"

res = input.timeframe("D", "Resolution", ["D","W","M"], group = groupSession)
london = input.session("0300-1200:1234567", "London Session", group = groupSession)
ny = input.session("0800-1700:1234567", "New York Session", group = groupSession)

//Bars

is_session(sess) =>
    not na(time(timeframe.period, sess, "America/New_York"))
    

//London

London = input.bool(true, "London Session", group = groupSession)

londonSession = is_session(london)

//New York

NY = input.bool(true, "New York Session", group = groupSession)

nySession = is_session(ny)


onSession = londonSession and nySession

// # ========================================================================= #
// #                   |   Session  |
// # ========================================================================= #

var entryPrice = 0.0
var priceLimit = 0.0
var priceStop = 0.0
var tradeDay = false
var groupBackTest ="Back Test Settings"

fromYear = input.int(defval=2000, title='From Year', minval=2000, inline = "BTFrom", group=groupBackTest)
fromMomth = input.int(defval=1, title='From Month', minval=1, maxval=12, inline = "BTFrom", group=groupBackTest)
fromDay = input.int(defval=1, title='From Day', minval=1, maxval=31, inline = "BTFrom", group=groupBackTest)
toYear = input.int(defval=2300, title='To Year', minval=2020, inline = "BTTo", group=groupBackTest)
toMomth = input.int(defval=1, title='To Month', minval=1, maxval=12, inline = "BTTo", group=groupBackTest)
toDay = input.int(defval=1, title='To Day', minval=1, maxval=31, inline = "BTTo", group=groupBackTest)
timeStart = timestamp(fromYear, fromMomth, fromDay, 00, 00)
timeFinish = timestamp(toYear, toMomth, toDay, 23, 59)
window()=>time>=timeStart and time <= timeFinish ? true : false

var groupTrade = "Trade Settings"

buySLMeth = input.session(defval = "%", title = "Buy Stop Loss Method", options = ["%", "ATR"], inline = "BuySL", group = groupTrade) 
sellSLMeth = input.session(defval = "%", title = "Sell Stop Loss Method", options = ["%", "ATR"], inline = "SellSL", group = groupTrade)
buyTPMeth = input.session(defval = "%", title = "Buy Take Profit Method", options = ["%", "ATR", "R/R"], inline = "BuyTP", group = groupTrade) 
sellTPMeth = input.session(defval = "%", title = "Sell Take Profit Method", options = ["%", "ATR", "R/R"], inline = "SellTP", group = groupTrade)

buySLPer = input.float(defval = 1 , title = "Buy Stop Loss %", minval = 0 , maxval = 100 , step = 0.01 , inline = "BuySL", group = groupTrade)/100
sellSLPer = input.float(defval = 1 , title = "Sell Stop Loss %", minval = 0 , maxval = 100 , step = 0.01 , inline = "SellSL", group = groupTrade)/100
buyTPPer = input.float(defval = 1 , title = "Buy Take Progit %", minval = 0 , maxval = 100 , step = 0.01 , inline = "BuyTP", group = groupTrade)/100
sellTPPer = input.float(defval = 1 , title = "Sell Take Progit %", minval = 0 , maxval = 100 , step = 0.01 , inline = "SellTP", group = groupTrade)/100

ratioRR = input.float(1, title='R/R Ratio', step = 0.1, group=groupTrade)

leverage = input.float(10, title='Leverage', step = 0.1, group=groupTrade)

dd1 = input.bool(0, title='Sun',inline = "tradeDay", group=groupTrade)
dd2 = input.bool(0, title='Mon', inline = "tradeDay", group=groupTrade)
dd3 = input.bool(0, title='Tues', inline = "tradeDay", group=groupTrade)
dd4 = input.bool(0, title='Wed', inline = "tradeDay", group=groupTrade)
dd5 = input.bool(0, title='Thur', inline = "tradeDay", group=groupTrade)
dd6 = input.bool(0, title='Fri', inline = "tradeDay", group=groupTrade)
dd7 = input.bool(0, title='Sat', inline = "tradeDay", group=groupTrade)

dayweek = dayofweek(time = time, timezone = 'America/New_York' )

tradeDay := switch dayweek
    1 => dd1
    2 => dd2
    3 => dd3
    4 => dd4
    5 => dd5
    6 => dd6
    7 => dd7
    => false



passADX = enableADX ? sig > lowestADX : true

buyVFI = enableVFI ? vfi > 0 : true
sellVFI = enableVFI ? vfi < 0 : true

buyfilters = passADX and buyVFI and tradeDay
sellfilters = passADX and sellVFI and tradeDay

// you can set your own logic here

buyCondition = buyfilters and strategy.position_size == 0 and buyMACD and buySAR and buyVO and onSession
sellCondition = sellfilters and strategy.position_size == 0 and sellMACD and sellSAR and sellVO and onSession

if (strategy.position_size != 0)
    entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1)
else
    entryPrice := 0.0
    priceLimit := 0.0
    priceStop := 0.0
// you can set your own logic here
if(window())
    if (buyCondition)
        priceStop := switch buySLMeth
            "%" => close * (1 - buySLPer)
            "ATR" => srcLower - atr * atrMultiplierLower
        
        priceLimit := switch buyTPMeth
            "%" => close * (1 + buyTPPer)
            "ATR" => srcUpper + atr * atrMultiplierUpper
            "R/R" => close + (close - priceStop) * ratioRR 

        strategy.entry('Buy', strategy.long, alert_message = "buy")
        strategy.exit("buyStoploss", "Buy", limit=priceLimit, stop=priceStop, alert_message="close")
    if (sellCondition)
        priceStop := switch sellSLMeth
            "%" => close * (1 + sellSLPer)
            "ATR" => srcUpper + atr * atrMultiplierUpper

        priceLimit := switch sellTPMeth
            "%" => close * (1 - sellTPPer)
            "ATR" => srcLower - atr * atrMultiplierLower
            "R/R" => close - (priceStop - close) * ratioRR

        strategy.entry('Sell', strategy.short, alert_message = "sell")
        strategy.exit("sellStoploss", "Sell",limit=priceLimit, stop=priceStop, alert_message="close")
        
net_profit = strategy.netprofit + strategy.openprofit


plot(net_profit, title='Net Profit', linewidth=2, style=plot.style_area, color=net_profit >= 0 ? #26A69A : color.new(color =color.red  , transp = 50))
// # ========================================================================= #
// #                   |   Print  |
// # ========================================================================= #

plotchar(entryPrice, "entryPrice", "", location = location.top)

plotchar(priceLimit, "priceLimit", "", location = location.top)
plotchar(priceStop, "priceStop", "", location = location.top)


plotchar(buyCondition, "buyCondition", "", location = location.top)
plotchar(sellCondition, "sellCondition", "", location = location.top)


plotchar(passADX, "passADX", "", location = location.top)
plotchar(buyVFI, "buyVFI", "", location = location.top)
plotchar(sellVFI, "sellVFI", "", location = location.top)
plotchar(buyfilters, "buyfilters", "", location = location.top)
plotchar(sellfilters, "sellfilters", "", location = location.top)
plotchar(tradeDay, "tradeDay", "", location = location.top)
plotchar(dayofweek(time = time, timezone = 'America/New_York' ) , "dayofweek(time = dayofweek, timezone = 'America/New_York' ) ", "", location = location.top)
