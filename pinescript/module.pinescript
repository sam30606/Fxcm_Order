
// # ========================================================================= #
// #                   |   Moving Average Exponential  |
// # ========================================================================= #

len = input.int(200, minval=1, title="Length", group="EMA Settings")
emaSrc = input(close, title="Source", group="EMA Settings")
offset = input.int(title="Offset", defval=0, minval=-500, maxval=500, group="EMA Settings")
emaOut = ta.ema(emaSrc, len)
plot(emaOut, title="EMA", color=color.blue, offset=offset)

//ma(source, length, type) =>
//    switch type
//        "SMA" => ta.sma(source, length)
//        "EMA" => ta.ema(source, length)
//        "SMMA (RMA)" => ta.rma(source, length)
//        "WMA" => ta.wma(source, length)
//        "VWMA" => ta.vwma(source, length)

//typeMA = input.string(title = "Method", defval = "SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="Smoothing")
//smoothingLength = input.int(title = "Length", defval = 5, minval = 1, maxval = 100, group="Smoothing")

//smoothingLine = ma(emaOut, smoothingLength, typeMA)
//plot(smoothingLine, title="Smoothing Line", color=#f37f20, offset=offset, display=display.none)


// # ========================================================================= #
// #                   |   Moving Average Exponential  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Parabolic SAR  |
// # ========================================================================= #

start = input(0.02, group="SAR Settings")
increment = input(0.02, group="SAR Settings")
maximum = input(0.2, "Max Value", group="SAR Settings")
out = ta.sar(start, increment, maximum)
//plot(out, "ParabolicSAR", style=plot.style_cross, color=#2962FF)

// # ========================================================================= #
// #                   |   Parabolic SAR  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Relative Strength Index  |
// # ========================================================================= #

//ma(source, length, type) =>
//    switch type
//        "SMA" => ta.sma(source, length)
//        "Bollinger Bands" => ta.sma(source, length)
//        "EMA" => ta.ema(source, length)
//        "SMMA (RMA)" => ta.rma(source, length)
//        "WMA" => ta.wma(source, length)
//        "VWMA" => ta.vwma(source, length)

rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
maTypeInput = input.string("SMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Settings")
maLengthInput = input.int(14, title="MA Length", group="MA Settings")
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group="MA Settings")

up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
//rsiMA = ma(rsi, maLengthInput, maTypeInput)
//isBB = maTypeInput == "Bollinger Bands"

//plot(rsi, "RSI", color=#7E57C2)
//plot(rsiMA, "RSI-based MA", color=color.yellow)
//rsiUpperBand = hline(70, "RSI Upper Band", color=#787B86)
//hline(50, "RSI Middle Band", color=color.new(#787B86, 50))
//rsiLowerBand = hline(30, "RSI Lower Band", color=#787B86)
//fill(rsiUpperBand, rsiLowerBand, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")
//bbUpperBand = plot(isBB ? rsiMA + ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Upper Bollinger Band", color=color.green)
//bbLowerBand = plot(isBB ? rsiMA - ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Lower Bollinger Band", color=color.green)
//fill(bbUpperBand, bbLowerBand, color= isBB ? color.new(color.green, 90) : na, title="Bollinger Bands Background Fill")

// # ========================================================================= #
// #                   |   Relative Strength Index  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Double EMA  |
// # ========================================================================= #


demaLength = input.int(200, minval=1, group="DEMA Settings")
demaSrc = input(close, title="Source", group="DEMA Settings")
e1 = ta.ema(demaSrc, demaLength)
e2 = ta.ema(e1, demaLength)
dema = 2 * e1 - e2
//plot(dema, "DEMA", color=#43A047)

// # ========================================================================= #
// #                   |   Double EMA  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Supertrend  |
// # ========================================================================= #


Periods = input(title='ATR Period', defval=12, group="Supertrend Settings")
src = input(hl2, title='Source', group="Supertrend Settings")
Multiplier = input.float(title='ATR Multiplier', step=0.1, defval=3.0, group="Supertrend Settings")
changeATR = input(title='Change ATR Calculation Method ?', defval=true, group="Supertrend Settings")
showsignals = input(title='Show Buy/Sell Signals ?', defval=true, group="Supertrend Settings")
highlighting = input(title='Highlighter On/Off ?', defval=true, group="Supertrend Settings")
atr2 = ta.sma(ta.tr, Periods)
atr = changeATR ? ta.atr(Periods) : atr2
up = src - Multiplier * atr
up1 = nz(up[1], up)
up := close[1] > up1 ? math.max(up, up1) : up
dn = src + Multiplier * atr
dn1 = nz(dn[1], dn)
dn := close[1] < dn1 ? math.min(dn, dn1) : dn
trend = 1
trend := nz(trend[1], trend)
trend := trend == -1 and close > dn1 ? 1 : trend == 1 and close < up1 ? -1 : trend
//upPlot = plot(trend == 1 ? up : na, title='Up Trend', style=plot.style_linebr, linewidth=2, color=color.new(color.green, 0))
buySignal = trend == 1 and trend[1] == -1
//plotshape(buySignal ? up : na, title='UpTrend Begins', location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(color.green, 0))
//plotshape(buySignal and showsignals ? up : na, title='Buy', text='Buy', location=location.absolute, style=shape.labelup, size=size.tiny, color=color.new(color.green, 0), textcolor=color.new(color.white, 0))
//dnPlot = plot(trend == 1 ? na : dn, title='Down Trend', style=plot.style_linebr, linewidth=2, color=color.new(color.red, 0))
sellSignal = trend == -1 and trend[1] == 1
//plotshape(sellSignal ? dn : na, title='DownTrend Begins', location=location.absolute, style=shape.circle, size=size.tiny, color=color.new(color.red, 0))
//plotshape(sellSignal and showsignals ? dn : na, title='Sell', text='Sell', location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.new(color.red, 0), textcolor=color.new(color.white, 0))
//mPlot = plot(ohlc4, title='', style=plot.style_circles, linewidth=0)
//longFillColor = highlighting ? trend == 1 ? color.green : color.white : color.white
//shortFillColor = highlighting ? trend == -1 ? color.red : color.white : color.white
//fill(mPlot, upPlot, title='UpTrend Highligter', color=longFillColor, transp=90)
//fill(mPlot, dnPlot, title='DownTrend Highligter', color=shortFillColor, transp=90)
//alertcondition(buySignal, title='SuperTrend Buy', message='SuperTrend Buy!')
//alertcondition(sellSignal, title='SuperTrend Sell', message='SuperTrend Sell!')
//changeCond = trend != trend[1]
//alertcondition(changeCond, title='SuperTrend Direction Change', message='SuperTrend has changed direction!')

// # ========================================================================= #
// #                   |   Supertrend  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Moving Average Convergence Divergenc  |
// # ========================================================================= #

// Getting inputs
fast_length = input(title="Fast Length", defval=12, group="MACD Settings")
slow_length = input(title="Slow Length", defval=26, group="MACD Settings")
macdSrc = input(title="Source", defval=close, group="MACD Settings")
signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9, group="MACD Settings")
sma_source = input.string(title="Oscillator MA Type",  defval="EMA", options=["SMA", "EMA"], group="MACD Settings")
sma_signal = input.string(title="Signal Line MA Type", defval="EMA", options=["SMA", "EMA"], group="MACD Settings")
// Plot colors
//col_macd = input(#2962FF, "MACD Line  ", group="Color Settings", inline="MACD", group="MACD Settings")
//col_signal = input(#FF6D00, "Signal Line  ", group="Color Settings", inline="Signal", group="MACD Settings")
//col_grow_above = input(#26A69A, "Above   Grow", group="Histogram", inline="Above", group="MACD Settings")
//col_fall_above = input(#B2DFDB, "Fall", group="Histogram", inline="Above", group="MACD Settings")
//col_grow_below = input(#FFCDD2, "Below Grow", group="Histogram", inline="Below", group="MACD Settings")
//col_fall_below = input(#FF5252, "Fall", group="Histogram", inline="Below", group="MACD Settings")
// Calculating
fast_ma = sma_source == "SMA" ? ta.sma(macdSrc, fast_length) : ta.ema(macdSrc, fast_length)
slow_ma = sma_source == "SMA" ? ta.sma(macdSrc, slow_length) : ta.ema(macdSrc, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal
//hline(0, "Zero Line", color=color.new(#787B86, 50))
//plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
//plot(macd, title="MACD", color=col_macd)
//plot(signal, title="Signal", color=col_signal)
// # ========================================================================= #
// #                   |   Moving Average Convergence Divergenc  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   ATR  |
// # ========================================================================= #

atrLength = input.int(title="Length", defval=13, minval=1)
smoothing = input.string(title="Smoothing", defval="RMA", options=["RMA", "SMA", "EMA", "WMA"])
ma_function(source, atrLength) =>
	switch smoothing
		"RMA" => ta.rma(source, atrLength)
		"SMA" => ta.sma(source, atrLength)
		"EMA" => ta.ema(source, atrLength)
		=> ta.wma(source, atrLength)
//plot(ma_function(ta.tr(true), atrLength), title = "ATR", color=color.new(#B71C1C, 0))
atrValue=ma_function(ta.tr(true), atrLength)
// # ========================================================================= #
// #                   |   ATR  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Supertrend  |
// # ========================================================================= #

atrPeriod_1 = input(12, "ATR Length", group="Supertrend Settings-1")
factor_1 = input.float(3.0, "Factor", step = 0.01, group="Supertrend Settings-1")

atrPeriod_2 = input(10, "ATR Length", group="Supertrend Settings-2")
factor_2 = input.float(1, "Factor", step = 0.01, group="Supertrend Settings-2")

atrPeriod_3 = input(11, "ATR Length", group="Supertrend Settings-3")
factor_3 = input.float(2, "Factor", step = 0.01, group="Supertrend Settings-3")

[supertrend_1, direction_1] = ta.supertrend(factor_1, atrPeriod_1)
upTrend_1 = direction_1 < 0 ? true : na
downTrend_1 = direction_1 < 0? na : true

[supertrend_2, direction_2] = ta.supertrend(factor_2, atrPeriod_2)
upTrend_2 = direction_2 < 0 ? true : na
downTrend_2 = direction_2 < 0? na : true

[supertrend_3, direction_3] = ta.supertrend(factor_3, atrPeriod_3)
upTrend_3 = direction_3 < 0 ? true : na
downTrend_3 = direction_3 < 0? na : true


// # ========================================================================= #
// #                   |   Supertrend  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   ADX and DI  |
// # ========================================================================= #
adxDIlen = input(14)


TrueRange = math.max(math.max(high - low, math.abs(high - nz(close[1]))), math.abs(low - nz(close[1])))
DirectionalMovementPlus = high - nz(high[1]) > nz(low[1]) - low ? math.max(high - nz(high[1]), 0) : 0
DirectionalMovementMinus = nz(low[1]) - low > high - nz(high[1]) ? math.max(nz(low[1]) - low, 0) : 0

SmoothedTrueRange = 0.0
SmoothedTrueRange := nz(SmoothedTrueRange[1]) - nz(SmoothedTrueRange[1]) / adxDIlen + TrueRange

SmoothedDirectionalMovementPlus = 0.0
SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - nz(SmoothedDirectionalMovementPlus[1]) / adxDIlen + DirectionalMovementPlus

SmoothedDirectionalMovementMinus = 0.0
SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - nz(SmoothedDirectionalMovementMinus[1]) / adxDIlen + DirectionalMovementMinus

DIPlus = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
DIMinus = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100

// # ========================================================================= #
// #                   |   ADX and DI  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Volatility Oscillator  |
// # ========================================================================= #
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © veryfid

lengthVOLO = input(100)
spike = close - open
x = ta.stdev(spike, lengthVOLO)
y = ta.stdev(spike, lengthVOLO) * -1

//plot(spike, color=color.new(color.white, 0), linewidth=2, title='Spike Linel')

//p1 = plot(x, 'Upper Line')
//p2 = plot(y, 'Lower Line')


// # ========================================================================= #
// #                   |   Volatility Oscillator  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Hull Suite by InSilico  |
// # ========================================================================= #

//INPUT
srcHull = input(close, title='Source', group = "Hull Suite Settings")
modeSwitch = input.string('Hma', title='Hull Variation', options=['Hma', 'Thma', 'Ehma'], group = "Hull Suite Settings")
lengthHull = input(80, title='Length(180-200 for floating S/R , 55 for swing entry)', group = "Hull Suite Settings")
lengthMult = input(2.0, title='Length multiplier (Used to view higher timeframes with straight band)', group = "Hull Suite Settings")


//FUNCTIONS
//HMA
HMA(_src, _length) =>
    ta.wma(2 * ta.wma(_src, _length / 2) - ta.wma(_src, _length), math.round(math.sqrt(_length)))
//EHMA    
EHMA(_src, _length) =>
    ta.ema(2 * ta.ema(_src, _length / 2) - ta.ema(_src, _length), math.round(math.sqrt(_length)))
//THMA    
THMA(_src, _length) =>
    ta.wma(ta.wma(_src, _length / 3) * 3 - ta.wma(_src, _length / 2) - ta.wma(_src, _length), _length)

//SWITCH
Mode(modeSwitch, srcHull, len) =>
    modeSwitch == 'Hma' ? HMA(srcHull, len) : modeSwitch == 'Ehma' ? EHMA(srcHull, len) : modeSwitch == 'Thma' ? THMA(srcHull, len / 2) : na

//OUT
_hull = Mode(modeSwitch, srcHull, int(lengthHull * lengthMult))
HULL =  _hull


//COLOR
hullColor = switchColor ? HULL > HULL[2] ? #00ff00 : #ff0000 : #ff9800

// # ========================================================================= #
// #                   |   Hull Suite by InSilico  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Boom Hunter Pro  |
// # ========================================================================= #

// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © veryfid

//Quotient
LPPeriod = input.int(6, title='Quotient | LPPeriod', inline='quotient', group='EOT 1 (Main Oscillator)')
K1 = input.int(0, title='K1', inline='quotient', group='EOT 1 (Main Oscillator)')
K2 = 0.3
esize = 60  //, title = "Size", inline = "quotient2", group = "EOT 1 (Main Oscillator)")
ey = 50  //, title = "Y axis", inline = "quotient2", group = "EOT 1 (Main Oscillator)")
trigno = input.int(2, 'Trigger Length', group='EOT 1 (Main Oscillator)', inline='quotient2')
trigcol = input.color(color.white, title='Trigger Color:', group='EOT 1 (Main Oscillator)', inline='q2')


// EOT 2
//Inputs
LPPeriod2 = input.int(27, title='LPPeriod2', group='EOT 2 (Red Wave)', inline='q2')
K12 = input.float(0.8, title='K1', group='EOT 2 (Red Wave)', inline='q2')
K22 = input.float(0.3, title='K2', group='EOT 2 (Red Wave)', inline='q2')
//EOT 1
//Vars
alpha1 = 0.00
HP = 0.00
a1 = 0.00
b1 = 0.00
c1 = 0.00
c2 = 0.00
c3 = 0.00
Filt = 0.00
Peak = 0.00
X = 0.00
Quotient1 = 0.00
Quotient2 = 0.00
pi = 2 * math.asin(1)

//Highpass filter cyclic components
//whose periods are shorter than 100 bars
alpha1 := (math.cos(.707 * 2 * pi / 100) + math.sin(.707 * 2 * pi / 100) - 1) / math.cos(.707 * 2 * pi / 100)
HP := (1 - alpha1 / 2) * (1 - alpha1 / 2) * (close - 2 * nz(close[1]) + nz(close[2])) + 2 * (1 - alpha1) * nz(HP[1]) - (1 - alpha1) * (1 - alpha1) * nz(HP[2])

//SuperSmoother Filter
a1 := math.exp(-1.414 * pi / LPPeriod)
b1 := 2 * a1 * math.cos(1.414 * pi / LPPeriod)
c2 := b1
c3 := -a1 * a1
c1 := 1 - c2 - c3
Filt := c1 * (HP + nz(HP[1])) / 2 + c2 * nz(Filt[1]) + c3 * nz(Filt[2])

//Fast Attack - Slow Decay Algorithm
Peak := .991 * nz(Peak[1])
if math.abs(Filt) > Peak
    Peak := math.abs(Filt)
    Peak

//Normalized Roofing Filter
if Peak != 0
    X := Filt / Peak
    X

Quotient1 := (X + K1) / (K1 * X + 1)
Quotient2 := (X + K2) / (K2 * X + 1)

// EOT 2


//Vars
alpha1222 = 0.00
HP2 = 0.00
a12 = 0.00
b12 = 0.00
c12 = 0.00
c22 = 0.00
c32 = 0.00
Filt2 = 0.00
Peak2 = 0.00
X2 = 0.00
Quotient3 = 0.00
Quotient4 = 0.00

alpha1222 := (math.cos(.707 * 2 * pi / 100) + math.sin(.707 * 2 * pi / 100) - 1) / math.cos(.707 * 2 * pi / 100)
HP2 := (1 - alpha1222 / 2) * (1 - alpha1222 / 2) * (close - 2 * nz(close[1]) + nz(close[2])) + 2 * (1 - alpha1222) * nz(HP2[1]) - (1 - alpha1222) * (1 - alpha1222) * nz(HP2[2])

//SuperSmoother Filter
a12 := math.exp(-1.414 * pi / LPPeriod2)
b12 := 2 * a12 * math.cos(1.414 * pi / LPPeriod2)
c22 := b12
c32 := -a12 * a12
c12 := 1 - c22 - c32
Filt2 := c12 * (HP2 + nz(HP2[1])) / 2 + c22 * nz(Filt2[1]) + c32 * nz(Filt2[2])

//Fast Attack - Slow Decay Algorithm
Peak2 := .991 * nz(Peak2[1])
if math.abs(Filt2) > Peak2
    Peak2 := math.abs(Filt2)
    Peak2

//Normalized Roofing Filter
if Peak2 != 0
    X2 := Filt2 / Peak2
    X2

Quotient3 := (X2 + K12) / (K12 * X2 + 1)
Quotient4 := (X2 + K22) / (K22 * X2 + 1)

q4 = Quotient4 * esize + ey
//Plot44 = plot(q4, color=color.new(color.red, 50), linewidth=1, title='Quotient 2')

//Plot EOT
q1 = Quotient1 * esize + ey
trigger = ta.sma(q1, trigno)
//Plot3 = plot(trigger, color=trigcol, linewidth=2, title='Quotient 1')

// # ========================================================================= #
// #                   |   Boom Hunter Pro  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Stochastic  |
// # ========================================================================= #

periodK = input.int(7, title="%K Length", minval=1)
smoothK = input.int(3, title="%K Smoothing", minval=1)
periodD = input.int(3, title="%D Smoothing", minval=1)
k = ta.sma(ta.stoch(close, high, low, periodK), smoothK)
d = ta.sma(k, periodD)
//plot(k, title="%K", color=#2962FF)
//plot(d, title="%D", color=#FF6D00)
// # ========================================================================= #
// #                   |   Stochastic  |
// # ========================================================================= #