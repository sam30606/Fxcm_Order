// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © sam30606

//@version=5
// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #
strategy("13-MACD", shorttitle="13-MACD", overlay=true , default_qty_type=strategy.percent_of_equity, default_qty_value=100, initial_capital=10000)

// # ========================================================================= #
// #                   |   STRATEGY  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #
var groupADX = "Average Directional Index Settings"

enableADX = input.bool(1, title = "Enable ADX?", group = groupADX) 
timeADX = input.timeframe('5', "Timeframe", group=groupADX)
lenADX = input(14, title="ADX Smoothing", group=groupADX)
lenDI = input(14, title="DI Length", group=groupADX)
lowestADX = input.float(32, title='ADX Lowest', step = 0.1, group=groupADX)

dirmov(_len) =>
	up = ta.change(high)
	down = -ta.change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = ta.rma(ta.tr, _len)
	plus = fixnan(100 * ta.rma(plusDM, _len) / truerange)
	minus = fixnan(100 * ta.rma(minusDM, _len) / truerange)
	[plus, minus]
adx(lenDI, lenADX) =>
	[plus, minus] = dirmov(lenDI)
	sum = plus + minus
	adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), lenADX)
sig = request.security(syminfo.tickerid, timeADX, adx(lenDI, lenADX))
// # ========================================================================= #
// #                   |   Average Directional Index  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   Volume Flow Indicator [LazyBear]  |
// # ========================================================================= #
// @author LazyBear
var groupVFI = "Volume Flow Indicator Settings"

enableVFI = input.bool(1, title = "Enable VFI?", group = groupVFI) 
lengthVFI = input(130, title='VFI length', group = groupVFI)
coef = input(1, group = groupVFI)
vcoef = input(3.4, title='Max. vol. cutoff', group = groupVFI)
smoothVFI = input(false, group = groupVFI)

VFIma(x, y) =>
    sma_1 = ta.sma(x, y)
    smoothVFI ? sma_1 : x

typical = hlc3
inter = math.log(typical) - math.log(typical[1])
vinter = ta.stdev(inter, 30)
cutoff = coef * vinter * close
vave = ta.sma(volume, lengthVFI)[1]
vmax = vave * vcoef
vc = volume < vmax ? volume : vmax  //min( volume, vmax )
mf = typical - typical[1]
iff_1 = mf < -cutoff ? -vc : 0
vcp = mf > cutoff ? vc : iff_1

vfi = VFIma(math.sum(vcp, lengthVFI) / vave, 3)

//plot(vfi, title='vfi', color=color.new(color.green, 0), linewidth=2)
// # ========================================================================= #
// #                   |   Volume Flow Indicator [LazyBear]  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   ATR Bands  |
// # ========================================================================= #
var groupATR = "ATR Bands Settings"

// Inputs
atrPeriod = input.int(title='ATR Period', defval=14, minval=1, group = groupATR)
srcUpper = input(title='Source Upper', defval=close, inline = "ATRSource", group = groupATR)
srcLower = input(title='Source Lower', defval=close, inline = "ATRSource",group = groupATR)
atrMultiplierUpper = input.float(title='ATR Multiplier Upper', defval=3, inline = "ATRMult",group = groupATR)
atrMultiplierLower = input.float(title='ATR Multiplier Lower', defval=3, inline = "ATRMult",group = groupATR)

// ATR
atr = ta.atr(atrPeriod)

// Plotting
//plot(srcUpper + atr * atrMultiplierUpper, color=color.new(color.green, 0))
//plot(srcLower - atr * atrMultiplierLower, color=color.new(color.red, 0))
// # ========================================================================= #
// #                   |   ATR Bands  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   MACD  |
// # ========================================================================= #
var bool wave1 = na
var bool wave2 = na
var wave1Price = 0.0
var wave2Price = 0.0
var wave1Hist = 0.0
var wave2Hist = 0.0


fast_length = input(title="Fast Length", defval=12)
slow_length = input(title="Slow Length", defval=26)
histLimit = input(title="histLimit", defval=20)
src = input(title="Source", defval=close)
signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9)
sma_source = input.string(title="Oscillator MA Type",  defval="EMA", options=["SMA", "EMA"])
sma_signal = input.string(title="Signal Line MA Type", defval="EMA", options=["SMA", "EMA"])
// Plot colors
col_macd = input(#2962FF, "MACD Line  ", group="Color Settings", inline="MACD")
col_signal = input(#FF6D00, "Signal Line  ", group="Color Settings", inline="Signal")
col_grow_above = input(#26A69A, "Above   Grow", group="Histogram", inline="Above")
col_fall_above = input(#B2DFDB, "Fall", group="Histogram", inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", group="Histogram", inline="Below")
col_fall_below = input(#FF5252, "Fall", group="Histogram", inline="Below")
// Calculating
fast_ma = sma_source == "SMA" ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
slow_ma = sma_source == "SMA" ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal

//hline(0, "Zero Line", color=color.new(#787B86, 50))
//plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
//plot(macd, title="MACD", color=col_macd)
//plot(signal, title="Signal", color=col_signal)
absHint = math.abs(hist)

if hist>=0
    if not (hist[1]>=0)
        wave1 := false
        wave1Price := 0
        wave1Hist := 0
        wave2 := false
        wave2Price := 0
        wave2Hist := 0


     
    if  absHint >= syminfo.mintick*histLimit 
        wave2 := wave2 ? wave2 : wave1 ? absHint < absHint[1] and absHint[1] > absHint[2] : false
        wave2Price := wave2Price ? wave2Price : wave2 ? high[1] : 0.0
        wave2Hist := wave2Hist ? wave2Hist : wave2 ? absHint[1] : 0.0
        wave1 := wave1 ? wave1 : absHint < absHint[1] and absHint[1] > absHint[2]
        wave1Price := wave1Price ? wave1Price :wave1 ? high[1] : 0.0
        wave1Hist := wave1Hist ? wave1Hist : wave1 ? absHint[1] : 0.0
else
    if (hist[1]>=0)
        wave1 := false
        wave1Price := 0
        wave1Hist := 0
        wave2 := false
        wave2Price := 0
        wave2Hist := 0


    if  absHint >= syminfo.mintick*histLimit 
        wave2 := wave2 ? wave2 : wave1 ? absHint < absHint[1] and absHint[1] > absHint[2] : false
        wave2Price := wave2Price ? wave2Price : wave2 ? high[1] : 0.0
        wave2Hist := wave2Hist ? wave2Hist : wave2 ? absHint[1] : 0.0
        wave1 := wave1 ? wave1 : absHint < absHint[1] and absHint[1] > absHint[2]
        wave1Price := wave1Price ? wave1Price :wave1 ? high[1] : 0.0
        wave1Hist := wave1Hist ? wave1Hist : wave1 ? absHint[1] : 0.0


buyMACD = wave2Price ? hist<0 and (wave2Price >= wave1Price) and (wave1Hist >= wave2Hist) : false
sellMACD = wave2Price ? hist>=0 and (wave2Price <= wave1Price) and (wave1Hist >= wave2Hist) : false

// # ========================================================================= #
// #                   |   MACD  |
// # ========================================================================= #

// # ========================================================================= #
// #                   |   ATR   |
// # ========================================================================= #
length = input.int(title="Length", defval=14, minval=1)
smoothing = input.string(title="Smoothing", defval="RMA", options=["RMA", "SMA", "EMA", "WMA"])
ma_function(source, length) =>
	switch smoothing
		"RMA" => ta.rma(source, length)
		"SMA" => ta.sma(source, length)
		"EMA" => ta.ema(source, length)
		=> ta.wma(source, length)
// # ========================================================================= #
// #                   |   ATR   |
// # ========================================================================= #

var entryPrice = 0.0
var priceLimit = 0.0
var priceStop = 0.0
var tradeDay = false
var groupBackTest ="Back Test Settings"

fromYear = input.int(defval=2000, title='From Year', minval=2000, inline = "BTFrom", group=groupBackTest)
fromMomth = input.int(defval=1, title='From Month', minval=1, maxval=12, inline = "BTFrom", group=groupBackTest)
fromDay = input.int(defval=1, title='From Day', minval=1, maxval=31, inline = "BTFrom", group=groupBackTest)
toYear = input.int(defval=2300, title='To Year', minval=2020, inline = "BTTo", group=groupBackTest)
toMomth = input.int(defval=1, title='To Month', minval=1, maxval=12, inline = "BTTo", group=groupBackTest)
toDay = input.int(defval=1, title='To Day', minval=1, maxval=31, inline = "BTTo", group=groupBackTest)
timeStart = timestamp(fromYear, fromMomth, fromDay, 00, 00)
timeFinish = timestamp(toYear, toMomth, toDay, 23, 59)
window()=>time>=timeStart and time <= timeFinish ? true : false

var groupTrade = "Trade Settings"

buySLMeth = input.session(defval = "%", title = "Buy Stop Loss Method", options = ["%", "ATR", "tick"], inline = "BuySL", group = groupTrade) 
sellSLMeth = input.session(defval = "%", title = "Sell Stop Loss Method", options = ["%", "ATR", "tick"], inline = "SellSL", group = groupTrade)
buyTPMeth = input.session(defval = "%", title = "Buy Take Profit Method", options = ["%", "ATR", "tick", "R/R"], inline = "BuyTP", group = groupTrade) 
sellTPMeth = input.session(defval = "%", title = "Sell Take Profit Method", options = ["%", "ATR", "tick", "R/R"], inline = "SellTP", group = groupTrade)

buySLPer = input.float(defval = 1 , title = "Buy Stop Loss %", minval = 0 , step = 0.01 , inline = "BuySL", group = groupTrade)
sellSLPer = input.float(defval = 1 , title = "Sell Stop Loss %", minval = 0 , step = 0.01 , inline = "SellSL", group = groupTrade)
buyTPPer = input.float(defval = 1 , title = "Buy Take Progit %", minval = 0 , step = 0.01 , inline = "BuyTP", group = groupTrade)
sellTPPer = input.float(defval = 1 , title = "Sell Take Progit %", minval = 0 , step = 0.01 , inline = "SellTP", group = groupTrade)

ratioRR = input.float(1, title='R/R Ratio', step = 0.1, group=groupTrade)

leverage = input.float(10, title='Leverage', step = 0.1, group=groupTrade)

dd1 = input.bool(0, title='Sun',inline = "tradeDay", group=groupTrade)
dd2 = input.bool(0, title='Mon', inline = "tradeDay", group=groupTrade)
dd3 = input.bool(0, title='Tues', inline = "tradeDay", group=groupTrade)
dd4 = input.bool(0, title='Wed', inline = "tradeDay", group=groupTrade)
dd5 = input.bool(0, title='Thur', inline = "tradeDay", group=groupTrade)
dd6 = input.bool(0, title='Fri', inline = "tradeDay", group=groupTrade)
dd7 = input.bool(0, title='Sat', inline = "tradeDay", group=groupTrade)

dayweek = dayofweek(time = time, timezone = 'America/New_York' )

tradeDay := switch dayweek
    1 => dd1
    2 => dd2
    3 => dd3
    4 => dd4
    5 => dd5
    6 => dd6
    7 => dd7
    => false



passADX = enableADX ? sig > lowestADX : true

buyVFI = enableVFI ? vfi > 0 : true
sellVFI = enableVFI ? vfi < 0 : true

buyfilters = passADX and buyVFI and tradeDay
sellfilters = passADX and sellVFI and tradeDay

// you can set your own logic here

buyCondition = buyfilters and strategy.position_size == 0 and buyMACD
sellCondition = sellfilters and strategy.position_size == 0 and sellMACD

if (strategy.position_size != 0)
    entryPrice := strategy.opentrades.entry_price(strategy.opentrades - 1)
else
    entryPrice := 0.0
    priceLimit := 0.0
    priceStop := 0.0
// you can set your own logic here
if(window())
    if (buyCondition)
        priceStop := switch buySLMeth
            "%" => close * (1 - buySLPer / 100)
            "ATR" => srcLower - atr * atrMultiplierLower
            "tick" => close - (syminfo.mintick * buySLPer)
        
        priceLimit := switch buyTPMeth
            "%" => close * (1 + buyTPPer / 100)
            "ATR" => srcUpper + atr * atrMultiplierUpper
            "tick" => close + (syminfo.mintick * buyTPPer)
            "R/R" => close + (close - priceStop) * ratioRR 

        strategy.entry('Buy', strategy.long, alert_message = "buy")
        strategy.exit("Buy", limit=priceLimit, stop=priceStop, comment_profit="Buy_profit", comment_loss="Buy_loss")
    if (sellCondition)
        priceStop := switch sellSLMeth
            "%" => close * (1 + sellSLPer / 100)
            "ATR" => srcUpper + atr * atrMultiplierUpper
            "tick" => close + (syminfo.mintick * sellSLPer)

        priceLimit := switch sellTPMeth
            "%" => close * (1 - sellTPPer / 100)
            "ATR" => srcLower - atr * atrMultiplierLower
            "tick" => close - (syminfo.mintick * sellTPPer)
            "R/R" => close - (priceStop - close) * ratioRR

        strategy.entry('Sell', strategy.short, alert_message = "sell")
        strategy.exit("Sell",limit=priceLimit, stop=priceStop, comment_profit="Sell_profit", comment_loss="Sell_loss")
        

// # ========================================================================= #
// #                   |   Print  |
// # ========================================================================= #

plotchar(entryPrice, "entryPrice", "", location = location.top)

plotchar(priceLimit, "priceLimit", "", location = location.top)
plotchar(priceStop, "priceStop", "", location = location.top)


plotchar(buyCondition, "buyCondition", "", location = location.top)
plotchar(sellCondition, "sellCondition", "", location = location.top)


plotchar(passADX, "passADX", "", location = location.top)
plotchar(buyVFI, "buyVFI", "", location = location.top)
plotchar(sellVFI, "sellVFI", "", location = location.top)
plotchar(buyfilters, "buyfilters", "", location = location.top)
plotchar(sellfilters, "sellfilters", "", location = location.top)
plotchar(tradeDay, "tradeDay", "", location = location.top)

plotchar(wave1, "wave1", "", location = location.top)
plotchar(wave1Price, "wave1Price", "", location = location.top)
plotchar(wave1Hist, "wave1Hist", "", location = location.top)
plotchar(wave2, "wave2", "", location = location.top)
plotchar(wave2Price, "wave2Price", "", location = location.top)
plotchar(wave2Hist, "wave2Hist", "", location = location.top)
plotchar(not(hist[1]>=0), "not(hist[1]>=0)", "", location = location.top)
plotchar((hist[1]>=0), "(hist[1]>=0)", "", location = location.top)
plotchar((hist>=0), "(hist>=0)", "", location = location.top)




plotchar(syminfo.mintick, "mintick", "", location = location.top)
